{"ast":null,"code":"var _jsxFileName = \"/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/src/components/DocumentUnderstanding/DocumentUnderstanding.js\";\nimport React, { Component } from \"react\";\nimport UploadService from \"../../services/upload-files.service\";\nimport DocViewer from \"react-doc-viewer\";\nimport { Button, FileUploader, StructuredList, StructuredListWrapper, StructuredListHead, StructuredListRow, StructuredListBody, StructuredListCell } from 'carbon-components-react';\nimport ResultsList from './ResultsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UploadFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFile = this.selectFile.bind(this);\n    this.upload = this.upload.bind(this);\n    this.state = {\n      selectedFiles: undefined,\n      currentFile: undefined,\n      progress: 0,\n      message: \"Please Upload Your Document\",\n      results: [],\n      docUrls: [{\n        fileData: ''\n      }],\n      fileInfos: []\n    };\n  }\n\n  selectFile(event) {\n    console.log(event.target.files);\n    this.setState({\n      selectedFiles: event.target.files\n    });\n  }\n\n  upload() {\n    let currentFile = this.state.selectedFiles[0];\n    this.setState({\n      progress: 0,\n      currentFile: currentFile\n    });\n    UploadService.upload(currentFile, event => {\n      this.setState({\n        progress: Math.round(100 * event.loaded / event.total)\n      });\n    }).then(response => {\n      console.log(response.data.transactionalId);\n      var getImagePath = URL.createObjectURL(currentFile);\n      console.log(getImagePath);\n      this.setState({\n        message: \"Uploaded Document, Now Processing.....\"\n      });\n      UploadService.executeRules(response.data.transactionalId, event => {\n        this.setState({\n          progress: Math.round(100 * event.loaded / event.total)\n        });\n      }).then(response => {\n        console.log(response.data);\n        this.setState({\n          docUrls: [{\n            uri: \"/api/documentunderstanding/getdoc/\" + response.data.transactionalId + \"/pdf\"\n          }],\n          results: response.data.values,\n          message: \"Document Processed\",\n          transactionId: response.data.transactionalId\n        });\n        return \"stuff\";\n      });\n    }).catch(() => {\n      this.setState({\n        progress: 0,\n        message: \"Could not upload the file!\",\n        currentFile: undefined\n      });\n    });\n    this.setState({\n      selectedFiles: undefined\n    });\n  }\n\n  showDocviewer() {\n    return /*#__PURE__*/_jsxDEV(DocViewer, {\n      documents: this.state.docUrls\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    const {\n      selectedFiles,\n      currentFile,\n      progress,\n      message,\n      fileInfos\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bx--file__container\",\n        children: [/*#__PURE__*/_jsxDEV(FileUploader, {\n          accept: ['.jpg', '.pdf'],\n          onChange: this.selectFile,\n          buttonKind: \"primary\",\n          buttonLabel: \"Add files\",\n          filenameStatus: \"edit\",\n          iconDescription: \"Clear file\",\n          labelDescription: \"only .pdf and jpg files at 500mb or less\",\n          labelTitle: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !selectedFiles,\n          onClick: this.upload,\n          children: \"Process Document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ResultsList, {\n        results: this.state.results\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 3\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/src/components/DocumentUnderstanding/DocumentUnderstanding.js"],"names":["React","Component","UploadService","DocViewer","Button","FileUploader","StructuredList","StructuredListWrapper","StructuredListHead","StructuredListRow","StructuredListBody","StructuredListCell","ResultsList","UploadFiles","constructor","props","selectFile","bind","upload","state","selectedFiles","undefined","currentFile","progress","message","results","docUrls","fileData","fileInfos","event","console","log","target","files","setState","Math","round","loaded","total","then","response","data","transactionalId","getImagePath","URL","createObjectURL","executeRules","uri","values","transactionId","catch","showDocviewer","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport UploadService from \"../../services/upload-files.service\";\nimport DocViewer from \"react-doc-viewer\";\nimport { Button,FileUploader,StructuredList,StructuredListWrapper,StructuredListHead,StructuredListRow,StructuredListBody,StructuredListCell } from 'carbon-components-react';\nimport ResultsList from './ResultsList'\n\nexport default class UploadFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFile = this.selectFile.bind(this);\n    this.upload = this.upload.bind(this);\n\n    this.state = {\n      selectedFiles: undefined,\n      currentFile: undefined,\n      progress: 0,\n      message: \"Please Upload Your Document\",\n      results: [],\n      docUrls: [ { fileData: '' } ],\n      fileInfos: [],\n    };\n  }\n\n  selectFile(event) {\n    console.log(event.target.files)\n    this.setState({\n      selectedFiles: event.target.files,\n    });\n  }\n\n  upload() {\n    let currentFile = this.state.selectedFiles[0];\n\n    this.setState({\n      progress: 0,\n      currentFile: currentFile,\n    });\n\n    UploadService.upload(currentFile, (event) => {\n      this.setState({\n        progress: Math.round((100 * event.loaded) / event.total),\n      });\n    }).then((response) => {\n        console.log(response.data.transactionalId);\n        var getImagePath = URL.createObjectURL(currentFile);\n        console.log(getImagePath);\n        this.setState({\n            message: \"Uploaded Document, Now Processing.....\"\n\n        })\n        UploadService.executeRules(response.data.transactionalId,(event) =>{\n            this.setState({\n            progress: Math.round((100 * event.loaded) / event.total),\n          });\n        }).then((response)=>{\n          console.log(response.data)\n          this.setState({\n            docUrls: [{uri: \"/api/documentunderstanding/getdoc/\" + response.data.transactionalId+ \"/pdf\"}],\n            results: response.data.values,\n            message: \"Document Processed\",\n            transactionId: response.data.transactionalId\n          });\n          return \"stuff\"\n        })\n      })\n      .catch(() => {\n        this.setState({\n          progress: 0,\n          message: \"Could not upload the file!\",\n          currentFile: undefined,\n        });\n      });\n\n    this.setState({\n      selectedFiles: undefined,\n    });\n  }\n\n  showDocviewer(){\n    return  <DocViewer documents={this.state.docUrls} />\n  }\n\n  render() {\n    const {\n      selectedFiles,\n      currentFile,\n      progress,\n      message,\n      fileInfos,\n    } = this.state;\n\n    return (\n  <div>\n    <h1>{this.state.message}</h1>\n      <div className=\"bx--file__container\">\n        <FileUploader\n          accept={[\n            '.jpg',\n            '.pdf'\n          ]}\n          onChange={this.selectFile}\n          buttonKind=\"primary\"\n          buttonLabel=\"Add files\"\n          filenameStatus=\"edit\"\n          iconDescription=\"Clear file\"\n          labelDescription=\"only .pdf and jpg files at 500mb or less\"\n          labelTitle=\"Upload\"\n        />\n\n        <Button\n          disabled={!selectedFiles}\n          onClick={this.upload}\n        >\n          Process Document\n        </Button>\n      </div>\n        <ResultsList results={this.state.results} />\n\n\n\n\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * Copyright IBM Corp. 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { WarningFilled16, WarningAltFilled16, EditOff16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\n/**\n * @typedef {object} InputProps\n * @property {string} id - The input's id\n * @property {boolean} readOnly - Whether the input should be readonly\n * @property {boolean} disabled - Whether the input should be disabled\n * @property {boolean} invalid - Whether the input should be marked as invalid\n * @property {string} invalidText - The validation message displayed in case the input is considered invalid\n * @property {boolean} warn - Whether the input should be in warning state\n * @property {string} warnText - The validation message displayed in case the input is in warning state\n */\n\n/**\n * @typedef {object} NormalizedInputProps\n * @property {boolean} disabled - Whether the input is disabled\n * @property {boolean} invalid - Whether the input is invalid (takes precedence over warn)\n * @property {string} invalidId - The invalid message's id\n * @property {boolean} warn - Whether the input is in warning state\n * @property {string} warnId - The warning message's id\n * @property {React.ReactNode | null} validation – React node rendering the appropriate validation message (if any)\n * @property {React.ReactNode | null} icon – React node rendering the appropriate accompanying icon (if any)\n */\n\n/**\n * Returns an object containing non-colliding props and additional, generated ones.\n * This hook ensures that only either \"invalid\" or \"warn\" is true but never both at\n * the same time. Regardless whether \"invalid\" or \"warn\", the appropriate validation\n * message is passed as \"validation\". If the input should be accompanied by an icon\n * (to visually represent a readonly, invalid or warning state), the appropriate icon\n * is passed as \"icon\".\n * It also ensure that neither \"invalid\", nor \"warn\", nor \"disabled\" are enabled when\n * \"readonly\" is passed as \"readonly\" takes precedence over these variants.\n *\n * @param {InputProps} props - The props passed to the component\n * @returns {NormalizedInputProps}\n */\n\nexport function useNormalizedInputProps(_ref) {\n  var id = _ref.id,\n      readOnly = _ref.readOnly,\n      disabled = _ref.disabled,\n      invalid = _ref.invalid,\n      invalidText = _ref.invalidText,\n      warn = _ref.warn,\n      warnText = _ref.warnText;\n  var normalizedProps = {\n    disabled: !readOnly && disabled,\n    invalid: !readOnly && invalid,\n    invalidId: \"\".concat(id, \"-error-msg\"),\n    warn: !readOnly && !invalid && warn,\n    warnId: \"\".concat(id, \"-warn-msg\"),\n    validation: null,\n    icon: null,\n    helperId: \"\".concat(id, \"-helper-text\")\n  };\n\n  if (readOnly) {\n    normalizedProps.icon = EditOff16;\n  } else {\n    if (normalizedProps.invalid) {\n      normalizedProps.icon = WarningFilled16;\n      normalizedProps.validation = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--form-requirement\"),\n        id: normalizedProps.invalidId\n      }, invalidText);\n    } else if (normalizedProps.warn) {\n      normalizedProps.icon = WarningAltFilled16;\n      normalizedProps.validation = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--form-requirement\"),\n        id: normalizedProps.warnId\n      }, warnText);\n    }\n  }\n\n  return normalizedProps;\n}","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/datacap-ui/node_modules/carbon-components-react/es/internal/useNormalizedInputProps.js"],"names":["React","WarningFilled16","WarningAltFilled16","EditOff16","settings","prefix","useNormalizedInputProps","_ref","id","readOnly","disabled","invalid","invalidText","warn","warnText","normalizedProps","invalidId","concat","warnId","validation","icon","helperId","createElement","className"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,SAA9C,QAA+D,qBAA/D;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,IAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AAC5C,MAAIC,EAAE,GAAGD,IAAI,CAACC,EAAd;AAAA,MACIC,QAAQ,GAAGF,IAAI,CAACE,QADpB;AAAA,MAEIC,QAAQ,GAAGH,IAAI,CAACG,QAFpB;AAAA,MAGIC,OAAO,GAAGJ,IAAI,CAACI,OAHnB;AAAA,MAIIC,WAAW,GAAGL,IAAI,CAACK,WAJvB;AAAA,MAKIC,IAAI,GAAGN,IAAI,CAACM,IALhB;AAAA,MAMIC,QAAQ,GAAGP,IAAI,CAACO,QANpB;AAOA,MAAIC,eAAe,GAAG;AACpBL,IAAAA,QAAQ,EAAE,CAACD,QAAD,IAAaC,QADH;AAEpBC,IAAAA,OAAO,EAAE,CAACF,QAAD,IAAaE,OAFF;AAGpBK,IAAAA,SAAS,EAAE,GAAGC,MAAH,CAAUT,EAAV,EAAc,YAAd,CAHS;AAIpBK,IAAAA,IAAI,EAAE,CAACJ,QAAD,IAAa,CAACE,OAAd,IAAyBE,IAJX;AAKpBK,IAAAA,MAAM,EAAE,GAAGD,MAAH,CAAUT,EAAV,EAAc,WAAd,CALY;AAMpBW,IAAAA,UAAU,EAAE,IANQ;AAOpBC,IAAAA,IAAI,EAAE,IAPc;AAQpBC,IAAAA,QAAQ,EAAE,GAAGJ,MAAH,CAAUT,EAAV,EAAc,cAAd;AARU,GAAtB;;AAWA,MAAIC,QAAJ,EAAc;AACZM,IAAAA,eAAe,CAACK,IAAhB,GAAuBjB,SAAvB;AACD,GAFD,MAEO;AACL,QAAIY,eAAe,CAACJ,OAApB,EAA6B;AAC3BI,MAAAA,eAAe,CAACK,IAAhB,GAAuBnB,eAAvB;AACAc,MAAAA,eAAe,CAACI,UAAhB,GAA6B,aAAanB,KAAK,CAACsB,aAAN,CAAoB,KAApB,EAA2B;AACnEC,QAAAA,SAAS,EAAE,GAAGN,MAAH,CAAUZ,MAAV,EAAkB,oBAAlB,CADwD;AAEnEG,QAAAA,EAAE,EAAEO,eAAe,CAACC;AAF+C,OAA3B,EAGvCJ,WAHuC,CAA1C;AAID,KAND,MAMO,IAAIG,eAAe,CAACF,IAApB,EAA0B;AAC/BE,MAAAA,eAAe,CAACK,IAAhB,GAAuBlB,kBAAvB;AACAa,MAAAA,eAAe,CAACI,UAAhB,GAA6B,aAAanB,KAAK,CAACsB,aAAN,CAAoB,KAApB,EAA2B;AACnEC,QAAAA,SAAS,EAAE,GAAGN,MAAH,CAAUZ,MAAV,EAAkB,oBAAlB,CADwD;AAEnEG,QAAAA,EAAE,EAAEO,eAAe,CAACG;AAF+C,OAA3B,EAGvCJ,QAHuC,CAA1C;AAID;AACF;;AAED,SAAOC,eAAP;AACD","sourcesContent":["/**\n * Copyright IBM Corp. 2021\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { WarningFilled16, WarningAltFilled16, EditOff16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\n/**\n * @typedef {object} InputProps\n * @property {string} id - The input's id\n * @property {boolean} readOnly - Whether the input should be readonly\n * @property {boolean} disabled - Whether the input should be disabled\n * @property {boolean} invalid - Whether the input should be marked as invalid\n * @property {string} invalidText - The validation message displayed in case the input is considered invalid\n * @property {boolean} warn - Whether the input should be in warning state\n * @property {string} warnText - The validation message displayed in case the input is in warning state\n */\n\n/**\n * @typedef {object} NormalizedInputProps\n * @property {boolean} disabled - Whether the input is disabled\n * @property {boolean} invalid - Whether the input is invalid (takes precedence over warn)\n * @property {string} invalidId - The invalid message's id\n * @property {boolean} warn - Whether the input is in warning state\n * @property {string} warnId - The warning message's id\n * @property {React.ReactNode | null} validation – React node rendering the appropriate validation message (if any)\n * @property {React.ReactNode | null} icon – React node rendering the appropriate accompanying icon (if any)\n */\n\n/**\n * Returns an object containing non-colliding props and additional, generated ones.\n * This hook ensures that only either \"invalid\" or \"warn\" is true but never both at\n * the same time. Regardless whether \"invalid\" or \"warn\", the appropriate validation\n * message is passed as \"validation\". If the input should be accompanied by an icon\n * (to visually represent a readonly, invalid or warning state), the appropriate icon\n * is passed as \"icon\".\n * It also ensure that neither \"invalid\", nor \"warn\", nor \"disabled\" are enabled when\n * \"readonly\" is passed as \"readonly\" takes precedence over these variants.\n *\n * @param {InputProps} props - The props passed to the component\n * @returns {NormalizedInputProps}\n */\n\nexport function useNormalizedInputProps(_ref) {\n  var id = _ref.id,\n      readOnly = _ref.readOnly,\n      disabled = _ref.disabled,\n      invalid = _ref.invalid,\n      invalidText = _ref.invalidText,\n      warn = _ref.warn,\n      warnText = _ref.warnText;\n  var normalizedProps = {\n    disabled: !readOnly && disabled,\n    invalid: !readOnly && invalid,\n    invalidId: \"\".concat(id, \"-error-msg\"),\n    warn: !readOnly && !invalid && warn,\n    warnId: \"\".concat(id, \"-warn-msg\"),\n    validation: null,\n    icon: null,\n    helperId: \"\".concat(id, \"-helper-text\")\n  };\n\n  if (readOnly) {\n    normalizedProps.icon = EditOff16;\n  } else {\n    if (normalizedProps.invalid) {\n      normalizedProps.icon = WarningFilled16;\n      normalizedProps.validation = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--form-requirement\"),\n        id: normalizedProps.invalidId\n      }, invalidText);\n    } else if (normalizedProps.warn) {\n      normalizedProps.icon = WarningAltFilled16;\n      normalizedProps.validation = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--form-requirement\"),\n        id: normalizedProps.warnId\n      }, warnText);\n    }\n  }\n\n  return normalizedProps;\n}"]},"metadata":{},"sourceType":"module"}
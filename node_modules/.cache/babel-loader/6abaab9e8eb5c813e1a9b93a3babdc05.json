{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// This file was heavily inspired by Reach UI and their work on their auto-id\n// package\n// https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/auto-id/src/index.ts\n//\n// The problem that this solves is an id mismatch when auto-generating\n// ids on both the server and the client. When using server-side rendering,\n// there can be the chance of a mismatch between what the server renders and\n// what the client renders when the id value is auto-generated.\n//\n// To get around this, we set the initial value of the `id` to `null` and then\n// conditionally use `useLayoutEffect` on the client and `useEffect` on the\n// server. On the client, `useLayoutEffect` will patch up the id to the correct\n// value. On the server, `useEffect` will not run.\n//\n// This ensures that we won't encounter a mismatch in ids between server and\n// client, at the cost of runtime patching of the id value in\n// `useLayoutEffect`\n\nimport { useEffect, useLayoutEffect, useState } from 'react';\nimport setupGetInstanceId from '../tools/setupGetInstanceId';\nimport { canUseDOM } from './environment';\nvar getId = setupGetInstanceId();\nvar useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;\nvar serverHandoffCompleted = false;\n/**\n * Generate a unique ID with an optional prefix prepended to it\n * @param {string} [prefix]\n * @returns {string}\n */\n\nexport function useId() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n\n  var _useState = useState(function () {\n    if (serverHandoffCompleted) {\n      return \"\".concat(prefix, \"-\").concat(getId());\n    }\n\n    return null;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      id = _useState2[0],\n      setId = _useState2[1];\n\n  useIsomorphicLayoutEffect(function () {\n    if (id === null) {\n      setId(\"\".concat(prefix, \"-\").concat(getId()));\n    }\n  }, [getId]);\n  useEffect(function () {\n    if (serverHandoffCompleted === false) {\n      serverHandoffCompleted = true;\n    }\n  }, []);\n  return id;\n}","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/datacap-ui/node_modules/carbon-components-react/es/internal/useId.js"],"names":["_slicedToArray","useEffect","useLayoutEffect","useState","setupGetInstanceId","canUseDOM","getId","useIsomorphicLayoutEffect","serverHandoffCompleted","useId","prefix","arguments","length","undefined","_useState","concat","_useState2","id","setId"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,sCAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,IAAIC,KAAK,GAAGF,kBAAkB,EAA9B;AACA,IAAIG,yBAAyB,GAAGF,SAAS,GAAGH,eAAH,GAAqBD,SAA9D;AACA,IAAIO,sBAAsB,GAAG,KAA7B;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,KAAT,GAAiB;AACtB,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAjF;;AAEA,MAAIG,SAAS,GAAGX,QAAQ,CAAC,YAAY;AACnC,QAAIK,sBAAJ,EAA4B;AAC1B,aAAO,GAAGO,MAAH,CAAUL,MAAV,EAAkB,GAAlB,EAAuBK,MAAvB,CAA8BT,KAAK,EAAnC,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GANuB,CAAxB;AAAA,MAOIU,UAAU,GAAGhB,cAAc,CAACc,SAAD,EAAY,CAAZ,CAP/B;AAAA,MAQIG,EAAE,GAAGD,UAAU,CAAC,CAAD,CARnB;AAAA,MASIE,KAAK,GAAGF,UAAU,CAAC,CAAD,CATtB;;AAWAT,EAAAA,yBAAyB,CAAC,YAAY;AACpC,QAAIU,EAAE,KAAK,IAAX,EAAiB;AACfC,MAAAA,KAAK,CAAC,GAAGH,MAAH,CAAUL,MAAV,EAAkB,GAAlB,EAAuBK,MAAvB,CAA8BT,KAAK,EAAnC,CAAD,CAAL;AACD;AACF,GAJwB,EAItB,CAACA,KAAD,CAJsB,CAAzB;AAKAL,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIO,sBAAsB,KAAK,KAA/B,EAAsC;AACpCA,MAAAA,sBAAsB,GAAG,IAAzB;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAKA,SAAOS,EAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// This file was heavily inspired by Reach UI and their work on their auto-id\n// package\n// https://github.com/reach/reach-ui/blob/86a046f54d53b6420e392b3fa56dd991d9d4e458/packages/auto-id/src/index.ts\n//\n// The problem that this solves is an id mismatch when auto-generating\n// ids on both the server and the client. When using server-side rendering,\n// there can be the chance of a mismatch between what the server renders and\n// what the client renders when the id value is auto-generated.\n//\n// To get around this, we set the initial value of the `id` to `null` and then\n// conditionally use `useLayoutEffect` on the client and `useEffect` on the\n// server. On the client, `useLayoutEffect` will patch up the id to the correct\n// value. On the server, `useEffect` will not run.\n//\n// This ensures that we won't encounter a mismatch in ids between server and\n// client, at the cost of runtime patching of the id value in\n// `useLayoutEffect`\nimport { useEffect, useLayoutEffect, useState } from 'react';\nimport setupGetInstanceId from '../tools/setupGetInstanceId';\nimport { canUseDOM } from './environment';\nvar getId = setupGetInstanceId();\nvar useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;\nvar serverHandoffCompleted = false;\n/**\n * Generate a unique ID with an optional prefix prepended to it\n * @param {string} [prefix]\n * @returns {string}\n */\n\nexport function useId() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n\n  var _useState = useState(function () {\n    if (serverHandoffCompleted) {\n      return \"\".concat(prefix, \"-\").concat(getId());\n    }\n\n    return null;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      id = _useState2[0],\n      setId = _useState2[1];\n\n  useIsomorphicLayoutEffect(function () {\n    if (id === null) {\n      setId(\"\".concat(prefix, \"-\").concat(getId()));\n    }\n  }, [getId]);\n  useEffect(function () {\n    if (serverHandoffCompleted === false) {\n      serverHandoffCompleted = true;\n    }\n  }, []);\n  return id;\n}"]},"metadata":{},"sourceType":"module"}
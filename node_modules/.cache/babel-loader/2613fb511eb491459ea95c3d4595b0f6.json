{"ast":null,"code":"var _jsxFileName = \"/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/src/components/DocumentUnderstanding/DocumentUnderstanding.js\";\nimport React, { Component } from \"react\";\nimport UploadService from \"../../services/upload-files.service\";\nimport DocViewer from \"react-doc-viewer\";\nimport { Button, FileUploader } from 'carbon-components-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UploadFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFile = this.selectFile.bind(this);\n    this.upload = this.upload.bind(this);\n    this.state = {\n      selectedFiles: undefined,\n      currentFile: undefined,\n      progress: 0,\n      message: \"Please Upload Your Document\",\n      results: [],\n      docUrls: [{\n        fileData: 'http://localhost:3000/api/documentunderstanding/getdoc/fa7e4cc0-b283-4e4d-b79d-39736930aa72/pdf'\n      }],\n      fileInfos: []\n    };\n  }\n\n  selectFile(event) {\n    this.setState({\n      selectedFiles: event.target.files\n    });\n  }\n\n  upload() {\n    let currentFile = this.state.selectedFiles[0];\n    this.setState({\n      progress: 0,\n      currentFile: currentFile\n    });\n    UploadService.upload(currentFile, event => {\n      this.setState({\n        progress: Math.round(100 * event.loaded / event.total)\n      });\n    }).then(response => {\n      console.log(response.data.transactionalId);\n      this.setState({\n        message: \"Uploaded Document, Now Processing.....\"\n      });\n      UploadService.executeRules(response.data.transactionalId, event => {\n        this.setState({\n          progress: Math.round(100 * event.loaded / event.total)\n        });\n      }).then(response => {\n        console.log(response.data);\n        this.setState({\n          docUrls: [{\n            uri: \"/api/documentunderstanding/getdoc/\" + response.data.transactionalId + \"/pdf\"\n          }],\n          results: response.data.values,\n          message: \"Document Processed\",\n          transactionId: response.data.transactionalId\n        });\n        return \"stuff\";\n      });\n    }).catch(() => {\n      this.setState({\n        progress: 0,\n        message: \"Could not upload the file!\",\n        currentFile: undefined\n      });\n    });\n    this.setState({\n      selectedFiles: undefined\n    });\n  }\n\n  showDocviewer() {\n    return /*#__PURE__*/_jsxDEV(DocViewer, {\n      documents: this.state.docUrls\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    const {\n      selectedFiles,\n      currentFile,\n      progress,\n      message,\n      fileInfos\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bx--file__container\",\n        children: /*#__PURE__*/_jsxDEV(FileUploader, {\n          accept: ['.jpg', '.png'],\n          onChange: this.selectFile,\n          buttonKind: \"primary\",\n          buttonLabel: \"Add files\",\n          filenameStatus: \"edit\",\n          iconDescription: \"Clear file\",\n          labelDescription: \"only .jpg files at 500mb or less\",\n          labelTitle: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"btn btn-default\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: this.selectFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: !selectedFiles,\n        onClick: this.upload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.results.map(d => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: d.fieldName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\" \", d.fieldValue]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 13\n            }, this)]\n          }, d.fieldName, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/src/components/DocumentUnderstanding/DocumentUnderstanding.js"],"names":["React","Component","UploadService","DocViewer","Button","FileUploader","UploadFiles","constructor","props","selectFile","bind","upload","state","selectedFiles","undefined","currentFile","progress","message","results","docUrls","fileData","fileInfos","event","setState","target","files","Math","round","loaded","total","then","response","console","log","data","transactionalId","executeRules","uri","values","transactionId","catch","showDocviewer","render","map","d","fieldName","fieldValue"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport UploadService from \"../../services/upload-files.service\";\nimport DocViewer from \"react-doc-viewer\";\nimport { Button,FileUploader } from 'carbon-components-react';\n\n\nexport default class UploadFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFile = this.selectFile.bind(this);\n    this.upload = this.upload.bind(this);\n\n    this.state = {\n      selectedFiles: undefined,\n      currentFile: undefined,\n      progress: 0,\n      message: \"Please Upload Your Document\",\n      results: [],\n      docUrls: [ { fileData: 'http://localhost:3000/api/documentunderstanding/getdoc/fa7e4cc0-b283-4e4d-b79d-39736930aa72/pdf' } ],\n      fileInfos: [],\n    };\n  }\n\n  selectFile(event) {\n    this.setState({\n      selectedFiles: event.target.files,\n    });\n  }\n\n  upload() {\n    let currentFile = this.state.selectedFiles[0];\n\n    this.setState({\n      progress: 0,\n      currentFile: currentFile,\n    });\n\n    UploadService.upload(currentFile, (event) => {\n      this.setState({\n        progress: Math.round((100 * event.loaded) / event.total),\n      });\n    }).then((response) => {\n        console.log(response.data.transactionalId);\n        this.setState({\n            message: \"Uploaded Document, Now Processing.....\"\n        })\n        UploadService.executeRules(response.data.transactionalId,(event) =>{\n            this.setState({\n            progress: Math.round((100 * event.loaded) / event.total),\n          });\n        }).then((response)=>{\n          console.log(response.data)\n          this.setState({\n            docUrls: [{uri: \"/api/documentunderstanding/getdoc/\" + response.data.transactionalId+ \"/pdf\"}],\n            results: response.data.values,\n            message: \"Document Processed\",\n            transactionId: response.data.transactionalId\n          });\n          return \"stuff\"\n        })\n      })\n      .catch(() => {\n        this.setState({\n          progress: 0,\n          message: \"Could not upload the file!\",\n          currentFile: undefined,\n        });\n      });\n\n    this.setState({\n      selectedFiles: undefined,\n    });\n  }\n\n  showDocviewer(){\n    return  <DocViewer documents={this.state.docUrls} />\n  }\n\n  render() {\n    const {\n      selectedFiles,\n      currentFile,\n      progress,\n      message,\n      fileInfos,\n    } = this.state;\n\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n        <div className=\"bx--file__container\">\n  <FileUploader\n    accept={[\n      '.jpg',\n      '.png'\n    ]}\n    onChange={this.selectFile}\n    buttonKind=\"primary\"\n    buttonLabel=\"Add files\"\n    filenameStatus=\"edit\"\n    iconDescription=\"Clear file\"\n    labelDescription=\"only .jpg files at 500mb or less\"\n    labelTitle=\"Upload\"\n  />\n</div>\n\n        <label className=\"btn btn-default\">\n          <input type=\"file\" onChange={this.selectFile} />\n        </label>\n\n        <Button\n          disabled={!selectedFiles}\n          onClick={this.upload}\n        >\n          Upload\n        </Button>\n\n        <table>\n          <tbody>\n\n\n          {this.state.results.map(d => (<tr key={d.fieldName}>\n            <td><h5>{d.fieldName}</h5> </td>\n            <td> {d.fieldValue}</td>\n          </tr>))}\n\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
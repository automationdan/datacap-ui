{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Legend } from '../../Text';\nimport { usePrefix } from '../../../internal/usePrefix';\nvar RadioButtonGroup = /*#__PURE__*/React.forwardRef(function RadioButtonGroup(_ref, ref) {\n  var _classNames;\n\n  var children = _ref.children,\n      className = _ref.className,\n      defaultSelected = _ref.defaultSelected,\n      disabled = _ref.disabled,\n      _ref$labelPosition = _ref.labelPosition,\n      labelPosition = _ref$labelPosition === void 0 ? 'right' : _ref$labelPosition,\n      legendText = _ref.legendText,\n      name = _ref.name,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      _ref$orientation = _ref.orientation,\n      orientation = _ref$orientation === void 0 ? 'horizontal' : _ref$orientation,\n      valueSelected = _ref.valueSelected;\n  var prefix = usePrefix();\n\n  var _useState = useState(valueSelected !== 'undefined' ? valueSelected : defaultSelected),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  var _useState3 = useState(selected),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevValueSelected = _useState4[0],\n      setPrevValueSelected = _useState4[1];\n  /**\n   * prop + state alignment - getDerivedStateFromProps\n   * only update if selected prop changes\n   */\n\n\n  if (prevValueSelected !== valueSelected) {\n    setSelected(valueSelected !== 'undefined' ? valueSelected : defaultSelected);\n    setPrevValueSelected(valueSelected);\n  }\n\n  function getRadioButtons() {\n    var mappedChildren = React.Children.map(children, function (radioButton) {\n      var value = radioButton.props.value;\n      return /*#__PURE__*/React.cloneElement(radioButton, {\n        name: name,\n        key: value,\n        value: value,\n        onChange: handleOnChange,\n        checked: value === selected\n      });\n    });\n    return mappedChildren;\n  }\n\n  function handleOnChange(newSelection, value, evt) {\n    if (newSelection !== selected) {\n      setSelected(newSelection);\n      onChange(newSelection, name, evt);\n    }\n  }\n\n  var fieldsetClasses = classNames(\"\".concat(prefix, \"--radio-button-group\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--radio-button-group--\").concat(orientation), orientation === 'vertical'), _defineProperty(_classNames, \"\".concat(prefix, \"--radio-button-group--label-\").concat(labelPosition), labelPosition), _classNames));\n  var wrapperClasses = classNames(\"\".concat(prefix, \"--form-item\"), className);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClasses,\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    className: fieldsetClasses,\n    disabled: disabled\n  }, legendText && /*#__PURE__*/React.createElement(Legend, {\n    className: \"\".concat(prefix, \"--label\")\n  }, legendText), getRadioButtons()));\n});\nRadioButtonGroup.propTypes = {\n  /**\n   * Provide a collection of <RadioButton> components to render in the group\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the <RadioButton> to be selected by default\n   */\n  defaultSelected: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify whether the group is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide where label text should be placed\n   */\n  labelPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Provide a legend to the RadioButtonGroup input that you are\n   * exposing to the user\n   */\n  legendText: PropTypes.node,\n\n  /**\n   * Specify the name of the underlying `<input>` nodes\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Provide an optional `onChange` hook that is called whenever the value of\n   * the group changes\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Provide where radio buttons should be placed\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * Specify the value that is currently selected in the group\n   */\n  valueSelected: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nexport default RadioButtonGroup;","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/node_modules/carbon-components-react/es/components/RadioButtonGroup/next/RadioButtonGroup.js"],"names":["_defineProperty","_slicedToArray","PropTypes","React","useState","classNames","Legend","usePrefix","RadioButtonGroup","forwardRef","_ref","ref","_classNames","children","className","defaultSelected","disabled","_ref$labelPosition","labelPosition","legendText","name","_ref$onChange","onChange","_ref$orientation","orientation","valueSelected","prefix","_useState","_useState2","selected","setSelected","_useState3","_useState4","prevValueSelected","setPrevValueSelected","getRadioButtons","mappedChildren","Children","map","radioButton","value","props","cloneElement","key","handleOnChange","checked","newSelection","evt","fieldsetClasses","concat","wrapperClasses","createElement","propTypes","node","string","oneOfType","number","bool","oneOf","isRequired","func"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Legend } from '../../Text';\nimport { usePrefix } from '../../../internal/usePrefix';\nvar RadioButtonGroup = /*#__PURE__*/React.forwardRef(function RadioButtonGroup(_ref, ref) {\n  var _classNames;\n\n  var children = _ref.children,\n      className = _ref.className,\n      defaultSelected = _ref.defaultSelected,\n      disabled = _ref.disabled,\n      _ref$labelPosition = _ref.labelPosition,\n      labelPosition = _ref$labelPosition === void 0 ? 'right' : _ref$labelPosition,\n      legendText = _ref.legendText,\n      name = _ref.name,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      _ref$orientation = _ref.orientation,\n      orientation = _ref$orientation === void 0 ? 'horizontal' : _ref$orientation,\n      valueSelected = _ref.valueSelected;\n  var prefix = usePrefix();\n\n  var _useState = useState(valueSelected !== 'undefined' ? valueSelected : defaultSelected),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  var _useState3 = useState(selected),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevValueSelected = _useState4[0],\n      setPrevValueSelected = _useState4[1];\n  /**\n   * prop + state alignment - getDerivedStateFromProps\n   * only update if selected prop changes\n   */\n\n\n  if (prevValueSelected !== valueSelected) {\n    setSelected(valueSelected !== 'undefined' ? valueSelected : defaultSelected);\n    setPrevValueSelected(valueSelected);\n  }\n\n  function getRadioButtons() {\n    var mappedChildren = React.Children.map(children, function (radioButton) {\n      var value = radioButton.props.value;\n      return /*#__PURE__*/React.cloneElement(radioButton, {\n        name: name,\n        key: value,\n        value: value,\n        onChange: handleOnChange,\n        checked: value === selected\n      });\n    });\n    return mappedChildren;\n  }\n\n  function handleOnChange(newSelection, value, evt) {\n    if (newSelection !== selected) {\n      setSelected(newSelection);\n      onChange(newSelection, name, evt);\n    }\n  }\n\n  var fieldsetClasses = classNames(\"\".concat(prefix, \"--radio-button-group\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--radio-button-group--\").concat(orientation), orientation === 'vertical'), _defineProperty(_classNames, \"\".concat(prefix, \"--radio-button-group--label-\").concat(labelPosition), labelPosition), _classNames));\n  var wrapperClasses = classNames(\"\".concat(prefix, \"--form-item\"), className);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClasses,\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    className: fieldsetClasses,\n    disabled: disabled\n  }, legendText && /*#__PURE__*/React.createElement(Legend, {\n    className: \"\".concat(prefix, \"--label\")\n  }, legendText), getRadioButtons()));\n});\nRadioButtonGroup.propTypes = {\n  /**\n   * Provide a collection of <RadioButton> components to render in the group\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the <RadioButton> to be selected by default\n   */\n  defaultSelected: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify whether the group is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide where label text should be placed\n   */\n  labelPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Provide a legend to the RadioButtonGroup input that you are\n   * exposing to the user\n   */\n  legendText: PropTypes.node,\n\n  /**\n   * Specify the name of the underlying `<input>` nodes\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Provide an optional `onChange` hook that is called whenever the value of\n   * the group changes\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Provide where radio buttons should be placed\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * Specify the value that is currently selected in the group\n   */\n  valueSelected: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nexport default RadioButtonGroup;"]},"metadata":{},"sourceType":"module"}
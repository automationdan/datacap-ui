{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"isOpen\", \"translateWithId\"];\n\nvar _defaultTranslations;\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ChevronDown16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\nexport var translationIds = {\n  'close.menu': 'close.menu',\n  'open.menu': 'open.menu'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['close.menu'], 'Close'), _defineProperty(_defaultTranslations, translationIds['open.menu'], 'Open'), _defaultTranslations);\n/**\n * `ListBoxTrigger` is used to orient the icon up or down depending on the\n * state of the menu for a given `ListBox`\n */\n\nvar ListBoxTrigger = function ListBoxTrigger(_ref) {\n  var _cx;\n\n  var isOpen = _ref.isOpen,\n      t = _ref.translateWithId,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--list-box__menu-icon\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__menu-icon--open\"), isOpen), _cx));\n  var description = isOpen ? t('close.menu') : t('open.menu');\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n    \"aria-label\": description,\n    title: description,\n    className: className,\n    type: \"button\",\n    tabIndex: \"-1\"\n  }), /*#__PURE__*/React.createElement(ChevronDown16, null));\n};\n\nListBoxTrigger.propTypes = {\n  /**\n   * Specify whether the menu is currently open, which will influence the\n   * direction of the menu icon\n   */\n  isOpen: PropTypes.bool.isRequired,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxTrigger.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxTrigger;","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/node_modules/carbon-components-react/es/components/ListBox/next/ListBoxTrigger.js"],"names":["_extends","_objectWithoutProperties","_defineProperty","_excluded","_defaultTranslations","cx","React","PropTypes","ChevronDown16","settings","prefix","translationIds","defaultTranslations","ListBoxTrigger","_ref","_cx","isOpen","t","translateWithId","rest","className","concat","description","createElement","title","type","tabIndex","propTypes","bool","isRequired","func","defaultProps","id"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,wBAAP,MAAqC,gDAArC;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,IAAIC,SAAS,GAAG,CAAC,QAAD,EAAW,iBAAX,CAAhB;;AAEA,IAAIC,oBAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,IAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAtB;AACA,OAAO,IAAIC,cAAc,GAAG;AAC1B,gBAAc,YADY;AAE1B,eAAa;AAFa,CAArB;AAIP,IAAIC,mBAAmB,IAAIR,oBAAoB,GAAG,EAAvB,EAA2BF,eAAe,CAACE,oBAAD,EAAuBO,cAAc,CAAC,YAAD,CAArC,EAAqD,OAArD,CAA1C,EAAyGT,eAAe,CAACE,oBAAD,EAAuBO,cAAc,CAAC,WAAD,CAArC,EAAoD,MAApD,CAAxH,EAAqLP,oBAAzL,CAAvB;AACA;AACA;AACA;AACA;;AAEA,IAAIS,cAAc,GAAG,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AACjD,MAAIC,GAAJ;;AAEA,MAAIC,MAAM,GAAGF,IAAI,CAACE,MAAlB;AAAA,MACIC,CAAC,GAAGH,IAAI,CAACI,eADb;AAAA,MAEIC,IAAI,GAAGlB,wBAAwB,CAACa,IAAD,EAAOX,SAAP,CAFnC;;AAIA,MAAIiB,SAAS,GAAGf,EAAE,EAAEU,GAAG,GAAG,EAAN,EAAUb,eAAe,CAACa,GAAD,EAAM,GAAGM,MAAH,CAAUX,MAAV,EAAkB,uBAAlB,CAAN,EAAkD,IAAlD,CAAzB,EAAkFR,eAAe,CAACa,GAAD,EAAM,GAAGM,MAAH,CAAUX,MAAV,EAAkB,6BAAlB,CAAN,EAAwDM,MAAxD,CAAjG,EAAkKD,GAApK,EAAlB;AACA,MAAIO,WAAW,GAAGN,MAAM,GAAGC,CAAC,CAAC,YAAD,CAAJ,GAAqBA,CAAC,CAAC,WAAD,CAA9C;AACA,SAAO,aAAaX,KAAK,CAACiB,aAAN,CAAoB,QAApB,EAA8BvB,QAAQ,CAAC,EAAD,EAAKmB,IAAL,EAAW;AACnE,kBAAcG,WADqD;AAEnEE,IAAAA,KAAK,EAAEF,WAF4D;AAGnEF,IAAAA,SAAS,EAAEA,SAHwD;AAInEK,IAAAA,IAAI,EAAE,QAJ6D;AAKnEC,IAAAA,QAAQ,EAAE;AALyD,GAAX,CAAtC,EAMhB,aAAapB,KAAK,CAACiB,aAAN,CAAoBf,aAApB,EAAmC,IAAnC,CANG,CAApB;AAOD,CAhBD;;AAkBAK,cAAc,CAACc,SAAf,GAA2B;AACzB;AACF;AACA;AACA;AACEX,EAAAA,MAAM,EAAET,SAAS,CAACqB,IAAV,CAAeC,UALE;;AAOzB;AACF;AACA;AACA;AACA;AACEX,EAAAA,eAAe,EAAEX,SAAS,CAACuB,IAAV,CAAeD;AAZP,CAA3B;AAcAhB,cAAc,CAACkB,YAAf,GAA8B;AAC5Bb,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBc,EAAzB,EAA6B;AAC5C,WAAOpB,mBAAmB,CAACoB,EAAD,CAA1B;AACD;AAH2B,CAA9B;AAKA,eAAenB,cAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"isOpen\", \"translateWithId\"];\n\nvar _defaultTranslations;\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ChevronDown16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\nexport var translationIds = {\n  'close.menu': 'close.menu',\n  'open.menu': 'open.menu'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['close.menu'], 'Close'), _defineProperty(_defaultTranslations, translationIds['open.menu'], 'Open'), _defaultTranslations);\n/**\n * `ListBoxTrigger` is used to orient the icon up or down depending on the\n * state of the menu for a given `ListBox`\n */\n\nvar ListBoxTrigger = function ListBoxTrigger(_ref) {\n  var _cx;\n\n  var isOpen = _ref.isOpen,\n      t = _ref.translateWithId,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--list-box__menu-icon\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__menu-icon--open\"), isOpen), _cx));\n  var description = isOpen ? t('close.menu') : t('open.menu');\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n    \"aria-label\": description,\n    title: description,\n    className: className,\n    type: \"button\",\n    tabIndex: \"-1\"\n  }), /*#__PURE__*/React.createElement(ChevronDown16, null));\n};\n\nListBoxTrigger.propTypes = {\n  /**\n   * Specify whether the menu is currently open, which will influence the\n   * direction of the menu icon\n   */\n  isOpen: PropTypes.bool.isRequired,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxTrigger.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxTrigger;"]},"metadata":{},"sourceType":"module"}
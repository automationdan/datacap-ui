{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _iconTypes;\n\nvar _excluded = [\"children\", \"className\", \"onClick\"],\n    _excluded2 = [\"ariaLabel\", \"className\", \"iconDescription\", \"type\", \"renderIcon\", \"name\", \"notificationType\"],\n    _excluded3 = [\"title\", \"subtitle\", \"caption\", \"notificationType\", \"children\"],\n    _excluded4 = [\"role\", \"notificationType\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"caption\", \"subtitle\", \"title\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"children\", \"timeout\"],\n    _excluded5 = [\"actions\", \"role\", \"notificationType\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"subtitle\", \"title\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"children\"];\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport cx from 'classnames';\nimport { Close20, ErrorFilled20, CheckmarkFilled20, WarningFilled20, WarningAltFilled20, InformationFilled20, InformationSquareFilled20 } from '@carbon/icons-react';\nimport Button from '../Button';\nimport { usePrefix } from '../../internal/usePrefix';\nexport function NotificationActionButton(_ref) {\n  var children = _ref.children,\n      customClassName = _ref.className,\n      onClick = _ref.onClick,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  var className = cx(customClassName, \"\".concat(prefix, \"--inline-notification__action-button\"));\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    className: className,\n    kind: \"ghost\",\n    onClick: onClick,\n    size: \"small\"\n  }, rest), children);\n}\nNotificationActionButton.propTypes = {\n  /**\n   * Specify the content of the notification action button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification action button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optionally specify a click handler for the notification action button.\n   */\n  onClick: PropTypes.func\n};\nexport function NotificationButton(_ref2) {\n  var ariaLabel = _ref2.ariaLabel,\n      className = _ref2.className,\n      iconDescription = _ref2.iconDescription,\n      type = _ref2.type,\n      IconTag = _ref2.renderIcon,\n      name = _ref2.name,\n      notificationType = _ref2.notificationType,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  var prefix = usePrefix();\n  var buttonClassName = cx(className, _defineProperty({}, \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-button\"), notificationType));\n  var iconClassName = cx(_defineProperty({}, \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-icon\"), notificationType));\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n    // eslint-disable-next-line react/button-has-type\n    type: type,\n    \"aria-label\": iconDescription,\n    title: iconDescription,\n    className: buttonClassName\n  }), IconTag && /*#__PURE__*/React.createElement(IconTag, {\n    \"aria-label\": ariaLabel,\n    className: iconClassName,\n    name: name\n  }));\n}\nNotificationButton.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the notification button\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Specify an optional className to be applied to the notification button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify an optional icon for the Button through a string,\n   * if something but regular \"close\" icon is desirable\n   */\n  name: PropTypes.string,\n\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline']),\n\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: PropTypes.string\n};\nNotificationButton.defaultProps = {\n  ariaLabel: 'close notification',\n  // TODO: deprecate this prop\n  notificationType: 'toast',\n  type: 'button',\n  iconDescription: 'close icon',\n  renderIcon: Close20\n};\nexport function NotificationTextDetails(_ref3) {\n  var title = _ref3.title,\n      subtitle = _ref3.subtitle,\n      caption = _ref3.caption,\n      notificationType = _ref3.notificationType,\n      children = _ref3.children,\n      rest = _objectWithoutProperties(_ref3, _excluded3);\n\n  var prefix = usePrefix();\n\n  if (notificationType === 'toast') {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n      className: \"\".concat(prefix, \"--toast-notification__details\")\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"\".concat(prefix, \"--toast-notification__title\")\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--toast-notification__subtitle\")\n    }, subtitle), caption && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--toast-notification__caption\")\n    }, caption), children);\n  }\n\n  if (notificationType === 'inline') {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n      className: \"\".concat(prefix, \"--inline-notification__text-wrapper\")\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"\".concat(prefix, \"--inline-notification__title\")\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--inline-notification__subtitle\")\n    }, subtitle), children);\n  }\n}\nNotificationTextDetails.propTypes = {\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.node,\n\n  /**\n   * Pass in the children that will be rendered in NotificationTextDetails\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline']),\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string\n};\nNotificationTextDetails.defaultProps = {\n  title: 'title',\n  notificationType: 'toast'\n};\nvar iconTypes = (_iconTypes = {\n  error: ErrorFilled20,\n  success: CheckmarkFilled20,\n  warning: WarningFilled20\n}, _defineProperty(_iconTypes, 'warning-alt', WarningAltFilled20), _defineProperty(_iconTypes, \"info\", InformationFilled20), _defineProperty(_iconTypes, 'info-square', InformationSquareFilled20), _iconTypes);\n\nfunction NotificationIcon(_ref4) {\n  var iconDescription = _ref4.iconDescription,\n      kind = _ref4.kind,\n      notificationType = _ref4.notificationType;\n  var prefix = usePrefix();\n  var IconForKind = iconTypes[kind];\n\n  if (!IconForKind) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(IconForKind, {\n    className: \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__icon\")\n  }, /*#__PURE__*/React.createElement(\"title\", null, iconDescription));\n}\n\nNotificationIcon.propTypes = {\n  iconDescription: PropTypes.string.isRequired,\n  kind: PropTypes.oneOf(['error', 'success', 'warning', 'warning-alt', 'info', 'info-square']).isRequired,\n  notificationType: PropTypes.oneOf(['inline', 'toast']).isRequired\n};\nexport function ToastNotification(_ref5) {\n  var _cx3;\n\n  var role = _ref5.role,\n      notificationType = _ref5.notificationType,\n      onClose = _ref5.onClose,\n      onCloseButtonClick = _ref5.onCloseButtonClick,\n      iconDescription = _ref5.iconDescription,\n      statusIconDescription = _ref5.statusIconDescription,\n      className = _ref5.className,\n      caption = _ref5.caption,\n      subtitle = _ref5.subtitle,\n      title = _ref5.title,\n      kind = _ref5.kind,\n      lowContrast = _ref5.lowContrast,\n      hideCloseButton = _ref5.hideCloseButton,\n      children = _ref5.children,\n      timeout = _ref5.timeout,\n      rest = _objectWithoutProperties(_ref5, _excluded4);\n\n  var prefix = usePrefix();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var containerClassName = cx(className, (_cx3 = {}, _defineProperty(_cx3, \"\".concat(prefix, \"--toast-notification\"), true), _defineProperty(_cx3, \"\".concat(prefix, \"--toast-notification--low-contrast\"), lowContrast), _defineProperty(_cx3, \"\".concat(prefix, \"--toast-notification--\").concat(kind), kind), _cx3));\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  var savedOnClose = useRef(onClose);\n  useEffect(function () {\n    savedOnClose.current = onClose;\n  });\n  useEffect(function () {\n    if (!timeout) {\n      return;\n    }\n\n    var timeoutId = window.setTimeout(function (event) {\n      setIsOpen(false);\n\n      if (savedOnClose.current) {\n        savedOnClose.current(event);\n      }\n    }, timeout);\n    return function () {\n      window.clearTimeout(timeoutId);\n    };\n  }, [timeout]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    role: role,\n    kind: kind,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: notificationType,\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(NotificationTextDetails, {\n    title: title,\n    subtitle: subtitle,\n    caption: caption,\n    notificationType: notificationType\n  }, children), !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: notificationType,\n    onClick: handleCloseButtonClick\n  }));\n}\nToastNotification.propTypes = {\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.node,\n\n  /**\n   * Pass in the children that will be rendered within the ToastNotification\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the ToastNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * By default, this value is \"toast\". You can also provide an alternate type\n   * if it makes sense for the underlying `<NotificationTextDetails>` and `<NotificationButton>`\n   */\n  notificationType: PropTypes.string,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Specify an optional duration the notification should be closed in\n   */\n  timeout: PropTypes.number,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string.isRequired\n};\nToastNotification.defaultProps = {\n  kind: 'error',\n  title: 'provide a title',\n  role: 'alert',\n  notificationType: 'toast',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false,\n  timeout: 0\n};\nexport function InlineNotification(_ref6) {\n  var _cx4;\n\n  var actions = _ref6.actions,\n      role = _ref6.role,\n      notificationType = _ref6.notificationType,\n      onClose = _ref6.onClose,\n      onCloseButtonClick = _ref6.onCloseButtonClick,\n      iconDescription = _ref6.iconDescription,\n      statusIconDescription = _ref6.statusIconDescription,\n      className = _ref6.className,\n      subtitle = _ref6.subtitle,\n      title = _ref6.title,\n      kind = _ref6.kind,\n      lowContrast = _ref6.lowContrast,\n      hideCloseButton = _ref6.hideCloseButton,\n      children = _ref6.children,\n      rest = _objectWithoutProperties(_ref6, _excluded5);\n\n  var prefix = usePrefix();\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isOpen = _useState4[0],\n      setIsOpen = _useState4[1];\n\n  var containerClassName = cx(className, (_cx4 = {}, _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification\"), true), _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification--low-contrast\"), lowContrast), _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification--\").concat(kind), kind), _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification--hide-close-button\"), hideCloseButton), _cx4));\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    role: role,\n    kind: kind,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-notification__details\")\n  }, /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: notificationType,\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(NotificationTextDetails, {\n    title: title,\n    subtitle: subtitle,\n    notificationType: notificationType\n  }, children)), actions, !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: notificationType,\n    onClick: handleCloseButtonClick\n  }));\n}\nInlineNotification.propTypes = {\n  /**\n   * Pass in the action nodes that will be rendered within the InlineNotification\n   */\n  actions: PropTypes.node,\n\n  /**\n   * Pass in the children that will be rendered within the InlineNotification\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the InlineNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * By default, this value is \"inline\". You can also provide an alternate type\n   * if it makes sense for the underlying `<NotificationTextDetails>` and `<NotificationButton>`\n   */\n  notificationType: PropTypes.string,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string.isRequired\n};\nInlineNotification.defaultProps = {\n  role: 'alert',\n  notificationType: 'inline',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false\n};","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/datacap-ui/node_modules/carbon-components-react/es/components/Notification/Notification.js"],"names":["_slicedToArray","_defineProperty","_extends","_objectWithoutProperties","_iconTypes","_excluded","_excluded2","_excluded3","_excluded4","_excluded5","PropTypes","React","useEffect","useRef","useState","cx","Close20","ErrorFilled20","CheckmarkFilled20","WarningFilled20","WarningAltFilled20","InformationFilled20","InformationSquareFilled20","Button","usePrefix","NotificationActionButton","_ref","children","customClassName","className","onClick","rest","prefix","concat","createElement","kind","size","propTypes","node","string","func","NotificationButton","_ref2","ariaLabel","iconDescription","type","IconTag","renderIcon","name","notificationType","buttonClassName","iconClassName","title","oneOf","oneOfType","object","defaultProps","NotificationTextDetails","_ref3","subtitle","caption","iconTypes","error","success","warning","NotificationIcon","_ref4","IconForKind","isRequired","ToastNotification","_ref5","_cx3","role","onClose","onCloseButtonClick","statusIconDescription","lowContrast","hideCloseButton","timeout","_useState","_useState2","isOpen","setIsOpen","containerClassName","handleClose","evt","handleCloseButtonClick","event","savedOnClose","current","timeoutId","window","setTimeout","clearTimeout","bool","number","InlineNotification","_ref6","_cx4","actions","_useState3","_useState4"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _iconTypes;\n\nvar _excluded = [\"children\", \"className\", \"onClick\"],\n    _excluded2 = [\"ariaLabel\", \"className\", \"iconDescription\", \"type\", \"renderIcon\", \"name\", \"notificationType\"],\n    _excluded3 = [\"title\", \"subtitle\", \"caption\", \"notificationType\", \"children\"],\n    _excluded4 = [\"role\", \"notificationType\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"caption\", \"subtitle\", \"title\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"children\", \"timeout\"],\n    _excluded5 = [\"actions\", \"role\", \"notificationType\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"subtitle\", \"title\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"children\"];\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport cx from 'classnames';\nimport { Close20, ErrorFilled20, CheckmarkFilled20, WarningFilled20, WarningAltFilled20, InformationFilled20, InformationSquareFilled20 } from '@carbon/icons-react';\nimport Button from '../Button';\nimport { usePrefix } from '../../internal/usePrefix';\nexport function NotificationActionButton(_ref) {\n  var children = _ref.children,\n      customClassName = _ref.className,\n      onClick = _ref.onClick,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  var className = cx(customClassName, \"\".concat(prefix, \"--inline-notification__action-button\"));\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    className: className,\n    kind: \"ghost\",\n    onClick: onClick,\n    size: \"small\"\n  }, rest), children);\n}\nNotificationActionButton.propTypes = {\n  /**\n   * Specify the content of the notification action button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification action button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optionally specify a click handler for the notification action button.\n   */\n  onClick: PropTypes.func\n};\nexport function NotificationButton(_ref2) {\n  var ariaLabel = _ref2.ariaLabel,\n      className = _ref2.className,\n      iconDescription = _ref2.iconDescription,\n      type = _ref2.type,\n      IconTag = _ref2.renderIcon,\n      name = _ref2.name,\n      notificationType = _ref2.notificationType,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  var prefix = usePrefix();\n  var buttonClassName = cx(className, _defineProperty({}, \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-button\"), notificationType));\n  var iconClassName = cx(_defineProperty({}, \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-icon\"), notificationType));\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n    // eslint-disable-next-line react/button-has-type\n    type: type,\n    \"aria-label\": iconDescription,\n    title: iconDescription,\n    className: buttonClassName\n  }), IconTag && /*#__PURE__*/React.createElement(IconTag, {\n    \"aria-label\": ariaLabel,\n    className: iconClassName,\n    name: name\n  }));\n}\nNotificationButton.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the notification button\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Specify an optional className to be applied to the notification button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify an optional icon for the Button through a string,\n   * if something but regular \"close\" icon is desirable\n   */\n  name: PropTypes.string,\n\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline']),\n\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: PropTypes.string\n};\nNotificationButton.defaultProps = {\n  ariaLabel: 'close notification',\n  // TODO: deprecate this prop\n  notificationType: 'toast',\n  type: 'button',\n  iconDescription: 'close icon',\n  renderIcon: Close20\n};\nexport function NotificationTextDetails(_ref3) {\n  var title = _ref3.title,\n      subtitle = _ref3.subtitle,\n      caption = _ref3.caption,\n      notificationType = _ref3.notificationType,\n      children = _ref3.children,\n      rest = _objectWithoutProperties(_ref3, _excluded3);\n\n  var prefix = usePrefix();\n\n  if (notificationType === 'toast') {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n      className: \"\".concat(prefix, \"--toast-notification__details\")\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"\".concat(prefix, \"--toast-notification__title\")\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--toast-notification__subtitle\")\n    }, subtitle), caption && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--toast-notification__caption\")\n    }, caption), children);\n  }\n\n  if (notificationType === 'inline') {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n      className: \"\".concat(prefix, \"--inline-notification__text-wrapper\")\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"\".concat(prefix, \"--inline-notification__title\")\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--inline-notification__subtitle\")\n    }, subtitle), children);\n  }\n}\nNotificationTextDetails.propTypes = {\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.node,\n\n  /**\n   * Pass in the children that will be rendered in NotificationTextDetails\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline']),\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string\n};\nNotificationTextDetails.defaultProps = {\n  title: 'title',\n  notificationType: 'toast'\n};\nvar iconTypes = (_iconTypes = {\n  error: ErrorFilled20,\n  success: CheckmarkFilled20,\n  warning: WarningFilled20\n}, _defineProperty(_iconTypes, 'warning-alt', WarningAltFilled20), _defineProperty(_iconTypes, \"info\", InformationFilled20), _defineProperty(_iconTypes, 'info-square', InformationSquareFilled20), _iconTypes);\n\nfunction NotificationIcon(_ref4) {\n  var iconDescription = _ref4.iconDescription,\n      kind = _ref4.kind,\n      notificationType = _ref4.notificationType;\n  var prefix = usePrefix();\n  var IconForKind = iconTypes[kind];\n\n  if (!IconForKind) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(IconForKind, {\n    className: \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__icon\")\n  }, /*#__PURE__*/React.createElement(\"title\", null, iconDescription));\n}\n\nNotificationIcon.propTypes = {\n  iconDescription: PropTypes.string.isRequired,\n  kind: PropTypes.oneOf(['error', 'success', 'warning', 'warning-alt', 'info', 'info-square']).isRequired,\n  notificationType: PropTypes.oneOf(['inline', 'toast']).isRequired\n};\nexport function ToastNotification(_ref5) {\n  var _cx3;\n\n  var role = _ref5.role,\n      notificationType = _ref5.notificationType,\n      onClose = _ref5.onClose,\n      onCloseButtonClick = _ref5.onCloseButtonClick,\n      iconDescription = _ref5.iconDescription,\n      statusIconDescription = _ref5.statusIconDescription,\n      className = _ref5.className,\n      caption = _ref5.caption,\n      subtitle = _ref5.subtitle,\n      title = _ref5.title,\n      kind = _ref5.kind,\n      lowContrast = _ref5.lowContrast,\n      hideCloseButton = _ref5.hideCloseButton,\n      children = _ref5.children,\n      timeout = _ref5.timeout,\n      rest = _objectWithoutProperties(_ref5, _excluded4);\n\n  var prefix = usePrefix();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var containerClassName = cx(className, (_cx3 = {}, _defineProperty(_cx3, \"\".concat(prefix, \"--toast-notification\"), true), _defineProperty(_cx3, \"\".concat(prefix, \"--toast-notification--low-contrast\"), lowContrast), _defineProperty(_cx3, \"\".concat(prefix, \"--toast-notification--\").concat(kind), kind), _cx3));\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  var savedOnClose = useRef(onClose);\n  useEffect(function () {\n    savedOnClose.current = onClose;\n  });\n  useEffect(function () {\n    if (!timeout) {\n      return;\n    }\n\n    var timeoutId = window.setTimeout(function (event) {\n      setIsOpen(false);\n\n      if (savedOnClose.current) {\n        savedOnClose.current(event);\n      }\n    }, timeout);\n    return function () {\n      window.clearTimeout(timeoutId);\n    };\n  }, [timeout]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    role: role,\n    kind: kind,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: notificationType,\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(NotificationTextDetails, {\n    title: title,\n    subtitle: subtitle,\n    caption: caption,\n    notificationType: notificationType\n  }, children), !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: notificationType,\n    onClick: handleCloseButtonClick\n  }));\n}\nToastNotification.propTypes = {\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.node,\n\n  /**\n   * Pass in the children that will be rendered within the ToastNotification\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the ToastNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * By default, this value is \"toast\". You can also provide an alternate type\n   * if it makes sense for the underlying `<NotificationTextDetails>` and `<NotificationButton>`\n   */\n  notificationType: PropTypes.string,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Specify an optional duration the notification should be closed in\n   */\n  timeout: PropTypes.number,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string.isRequired\n};\nToastNotification.defaultProps = {\n  kind: 'error',\n  title: 'provide a title',\n  role: 'alert',\n  notificationType: 'toast',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false,\n  timeout: 0\n};\nexport function InlineNotification(_ref6) {\n  var _cx4;\n\n  var actions = _ref6.actions,\n      role = _ref6.role,\n      notificationType = _ref6.notificationType,\n      onClose = _ref6.onClose,\n      onCloseButtonClick = _ref6.onCloseButtonClick,\n      iconDescription = _ref6.iconDescription,\n      statusIconDescription = _ref6.statusIconDescription,\n      className = _ref6.className,\n      subtitle = _ref6.subtitle,\n      title = _ref6.title,\n      kind = _ref6.kind,\n      lowContrast = _ref6.lowContrast,\n      hideCloseButton = _ref6.hideCloseButton,\n      children = _ref6.children,\n      rest = _objectWithoutProperties(_ref6, _excluded5);\n\n  var prefix = usePrefix();\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isOpen = _useState4[0],\n      setIsOpen = _useState4[1];\n\n  var containerClassName = cx(className, (_cx4 = {}, _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification\"), true), _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification--low-contrast\"), lowContrast), _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification--\").concat(kind), kind), _defineProperty(_cx4, \"\".concat(prefix, \"--inline-notification--hide-close-button\"), hideCloseButton), _cx4));\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    role: role,\n    kind: kind,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-notification__details\")\n  }, /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: notificationType,\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(NotificationTextDetails, {\n    title: title,\n    subtitle: subtitle,\n    notificationType: notificationType\n  }, children)), actions, !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: notificationType,\n    onClick: handleCloseButtonClick\n  }));\n}\nInlineNotification.propTypes = {\n  /**\n   * Pass in the action nodes that will be rendered within the InlineNotification\n   */\n  actions: PropTypes.node,\n\n  /**\n   * Pass in the children that will be rendered within the InlineNotification\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the InlineNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * By default, this value is \"inline\". You can also provide an alternate type\n   * if it makes sense for the underlying `<NotificationTextDetails>` and `<NotificationButton>`\n   */\n  notificationType: PropTypes.string,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string.isRequired\n};\nInlineNotification.defaultProps = {\n  role: 'alert',\n  notificationType: 'inline',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false\n};"]},"metadata":{},"sourceType":"module"}
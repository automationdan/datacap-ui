{"ast":null,"code":"import _classCallCheck from\"/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import UploadService from\"../../services/upload-files.service\";import DocViewer from\"react-doc-viewer\";import{Button,FileUploader}from'carbon-components-react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var UploadFiles=/*#__PURE__*/function(_Component){_inherits(UploadFiles,_Component);var _super=_createSuper(UploadFiles);function UploadFiles(props){var _this;_classCallCheck(this,UploadFiles);_this=_super.call(this,props);_this.selectFile=_this.selectFile.bind(_assertThisInitialized(_this));_this.upload=_this.upload.bind(_assertThisInitialized(_this));_this.state={selectedFiles:undefined,currentFile:undefined,progress:0,message:\"Please Upload Your Document\",results:[],docUrls:[{fileData:''}],fileInfos:[]};return _this;}_createClass(UploadFiles,[{key:\"selectFile\",value:function selectFile(event){console.log(event.target.files);this.setState({selectedFiles:event.target.files});}},{key:\"upload\",value:function upload(){var _this2=this;var currentFile=this.state.selectedFiles[0];this.setState({progress:0,currentFile:currentFile});UploadService.upload(currentFile,function(event){_this2.setState({progress:Math.round(100*event.loaded/event.total)});}).then(function(response){console.log(response.data.transactionalId);var getImagePath=URL.createObjectURL(currentFile);console.log(getImagePath);_this2.setState({message:\"Uploaded Document, Now Processing.....\"});UploadService.executeRules(response.data.transactionalId,function(event){_this2.setState({progress:Math.round(100*event.loaded/event.total)});}).then(function(response){console.log(response.data);_this2.setState({docUrls:[{uri:\"/api/documentunderstanding/getdoc/\"+response.data.transactionalId+\"/pdf\"}],results:response.data.values,message:\"Document Processed\",transactionId:response.data.transactionalId});return\"stuff\";});}).catch(function(){_this2.setState({progress:0,message:\"Could not upload the file!\",currentFile:undefined});});this.setState({selectedFiles:undefined});}},{key:\"showDocviewer\",value:function showDocviewer(){return/*#__PURE__*/_jsx(DocViewer,{documents:this.state.docUrls});}},{key:\"render\",value:function render(){var _this$state=this.state,selectedFiles=_this$state.selectedFiles,currentFile=_this$state.currentFile,progress=_this$state.progress,message=_this$state.message,fileInfos=_this$state.fileInfos;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:this.state.message}),/*#__PURE__*/_jsxs(\"div\",{className:\"bx--file__container\",children:[/*#__PURE__*/_jsx(FileUploader,{accept:['.jpg','.pdf'],onChange:this.selectFile,buttonKind:\"primary\",buttonLabel:\"Add files\",filenameStatus:\"edit\",iconDescription:\"Clear file\",labelDescription:\"only .jpg files at 500mb or less\",labelTitle:\"Upload\"}),/*#__PURE__*/_jsx(Button,{disabled:!selectedFiles,onClick:this.upload,children:\"Process Document\"})]}),/*#__PURE__*/_jsx(\"table\",{children:/*#__PURE__*/_jsx(\"tbody\",{children:this.state.results.map(function(d){return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"h5\",{children:d.fieldName}),\" \"]}),/*#__PURE__*/_jsxs(\"td\",{children:[\" \",d.fieldValue]})]},d.fieldName);})})})]});}}]);return UploadFiles;}(Component);export{UploadFiles as default};","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/src/components/DocumentUnderstanding/DocumentUnderstanding.js"],"names":["React","Component","UploadService","DocViewer","Button","FileUploader","UploadFiles","props","selectFile","bind","upload","state","selectedFiles","undefined","currentFile","progress","message","results","docUrls","fileData","fileInfos","event","console","log","target","files","setState","Math","round","loaded","total","then","response","data","transactionalId","getImagePath","URL","createObjectURL","executeRules","uri","values","transactionId","catch","map","d","fieldName","fieldValue"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport UploadService from \"../../services/upload-files.service\";\nimport DocViewer from \"react-doc-viewer\";\nimport { Button,FileUploader } from 'carbon-components-react';\n\n\nexport default class UploadFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFile = this.selectFile.bind(this);\n    this.upload = this.upload.bind(this);\n\n    this.state = {\n      selectedFiles: undefined,\n      currentFile: undefined,\n      progress: 0,\n      message: \"Please Upload Your Document\",\n      results: [],\n      docUrls: [ { fileData: '' } ],\n      fileInfos: [],\n    };\n  }\n\n  selectFile(event) {\n    console.log(event.target.files)\n    this.setState({\n      selectedFiles: event.target.files,\n    });\n  }\n\n  upload() {\n    let currentFile = this.state.selectedFiles[0];\n\n    this.setState({\n      progress: 0,\n      currentFile: currentFile,\n    });\n\n    UploadService.upload(currentFile, (event) => {\n      this.setState({\n        progress: Math.round((100 * event.loaded) / event.total),\n      });\n    }).then((response) => {\n        console.log(response.data.transactionalId);\n        var getImagePath = URL.createObjectURL(currentFile);\n        console.log(getImagePath);\n        this.setState({\n            message: \"Uploaded Document, Now Processing.....\"\n\n        })\n        UploadService.executeRules(response.data.transactionalId,(event) =>{\n            this.setState({\n            progress: Math.round((100 * event.loaded) / event.total),\n          });\n        }).then((response)=>{\n          console.log(response.data)\n          this.setState({\n            docUrls: [{uri: \"/api/documentunderstanding/getdoc/\" + response.data.transactionalId+ \"/pdf\"}],\n            results: response.data.values,\n            message: \"Document Processed\",\n            transactionId: response.data.transactionalId\n          });\n          return \"stuff\"\n        })\n      })\n      .catch(() => {\n        this.setState({\n          progress: 0,\n          message: \"Could not upload the file!\",\n          currentFile: undefined,\n        });\n      });\n\n    this.setState({\n      selectedFiles: undefined,\n    });\n  }\n\n  showDocviewer(){\n    return  <DocViewer documents={this.state.docUrls} />\n  }\n\n  render() {\n    const {\n      selectedFiles,\n      currentFile,\n      progress,\n      message,\n      fileInfos,\n    } = this.state;\n\n    return (\n  <div>\n    <h1>{this.state.message}</h1>\n      <div className=\"bx--file__container\">\n        <FileUploader\n          accept={[\n            '.jpg',\n            '.pdf'\n          ]}\n          onChange={this.selectFile}\n          buttonKind=\"primary\"\n          buttonLabel=\"Add files\"\n          filenameStatus=\"edit\"\n          iconDescription=\"Clear file\"\n          labelDescription=\"only .jpg files at 500mb or less\"\n          labelTitle=\"Upload\"\n        />\n\n        <Button\n          disabled={!selectedFiles}\n          onClick={this.upload}\n        >\n          Process Document\n        </Button>\n  </div>\n        <table>\n          <tbody>\n\n\n          {this.state.results.map(d => (<tr key={d.fieldName}>\n            <td><h5>{d.fieldName}</h5> </td>\n            <td> {d.fieldValue}</td>\n          </tr>))}\n\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"className\", \"leftOverflowButtonProps\", \"light\", \"onSelectionChange\", \"rightOverflowButtonProps\", \"scrollIntoView\", \"selected\", \"selectionMode\", \"tabContentClassName\"];\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport PropTypes from 'prop-types';\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { ChevronLeft16, ChevronRight16 } from '@carbon/icons-react';\nimport debounce from 'lodash.debounce';\nimport { keys, match, matches } from '../../../internal/keyboard';\nimport TabContent from '../../TabContent';\nimport deprecate from '../../../prop-types/deprecate';\nimport { usePrefix } from '../../../internal/usePrefix';\nvar ContainedTabs = /*#__PURE__*/React.forwardRef(function ContainedTabs(_ref, ref) {\n  var _classNames2, _classNames3;\n\n  var children = _ref.children,\n      className = _ref.className,\n      leftOverflowButtonProps = _ref.leftOverflowButtonProps,\n      _ref$light = _ref.light,\n      light = _ref$light === void 0 ? false : _ref$light,\n      onSelectionChange = _ref.onSelectionChange,\n      rightOverflowButtonProps = _ref.rightOverflowButtonProps,\n      _ref$scrollIntoView = _ref.scrollIntoView,\n      scrollIntoView = _ref$scrollIntoView === void 0 ? true : _ref$scrollIntoView,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? 0 : _ref$selected,\n      _ref$selectionMode = _ref.selectionMode,\n      selectionMode = _ref$selectionMode === void 0 ? 'automatic' : _ref$selectionMode,\n      tabContentClassName = _ref.tabContentClassName,\n      other = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix(); //refs\n\n  var tablist = useRef();\n  var leftOverflowNavButton = useRef();\n  var rightOverflowNavButton = useRef();\n  var tabs = useRef([]); //states\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      horizontalOverflow = _useState2[0],\n      setHorizontalOverflow = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tablistClientWidth = _useState4[0],\n      setTablistClientWidth = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tablistScrollWidth = _useState6[0],\n      setTablistScrollWidth = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tablistScrollLeft = _useState8[0],\n      setTablistScrollLeft = _useState8[1];\n\n  var _useState9 = useState(selected),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isSelected = _useState10[0],\n      setIsSelected = _useState10[1];\n\n  var _useState11 = useState(isSelected),\n      _useState12 = _slicedToArray(_useState11, 2),\n      prevSelected = _useState12[0],\n      setPrevSelected = _useState12[1];\n  /**\n   * prop + state alignment - getDerivedStateFromProps\n   * only update if selected prop changes\n   */\n\n\n  useEffect(function () {\n    if (selected !== prevSelected) {\n      setIsSelected(selected);\n      setPrevSelected(selected);\n    }\n  }, [selected]); //eslint-disable-line react-hooks/exhaustive-deps\n  // width of the overflow buttons\n\n  var OVERFLOW_BUTTON_OFFSET = 40;\n  /**\n   * `scroll` event handler to save tablist clientWidth, scrollWidth, and\n   * scrollLeft\n   */\n\n  var handleScroll = function handleScroll() {\n    if (!(tablist !== null && tablist !== void 0 && tablist.current)) {\n      return;\n    }\n\n    var _tablist$current = tablist.current,\n        clientWidth = _tablist$current.clientWidth,\n        scrollLeft = _tablist$current.scrollLeft,\n        scrollWidth = _tablist$current.scrollWidth;\n    setTablistClientWidth(clientWidth);\n    setTablistScrollWidth(scrollWidth);\n    setTablistScrollLeft(scrollLeft);\n    setHorizontalOverflow(scrollWidth > clientWidth);\n  };\n  /**\n   * The debounced version of the `resize` event handler.\n   * @type {Function}\n   * @private\n   */\n\n\n  var _debouncedHandleWindowResize = useRef();\n\n  var _handleWindowResize = handleScroll;\n  /**\n   * returns all tabs that are not disabled\n   * used for keyboard navigation\n   */\n\n  var getEnabledTabs = function getEnabledTabs() {\n    return React.Children.toArray(children).reduce(function (enabledTabs, tab, index) {\n      return !tab.props.disabled ? enabledTabs.concat(index) : enabledTabs;\n    }, []);\n  };\n  /**\n   * returns the index of the next tab we are going to when navigating L/R arrow keys (i.e. 0, 1, 2)\n   * used in handleTabKeyDown to get the next index after keyboard arrow evt, which then updates selected tab\n   */\n\n\n  var getNextIndex = function getNextIndex(index, direction) {\n    var enabledTabs = getEnabledTabs();\n    var nextIndex = Math.max(enabledTabs.indexOf(index) + direction, // For `tab` not found in `enabledTabs`\n    -1);\n    var nextIndexLooped = nextIndex >= 0 && nextIndex < enabledTabs.length ? nextIndex : nextIndex - Math.sign(nextIndex) * enabledTabs.length;\n    return enabledTabs[nextIndexLooped];\n  };\n  /**\n   * used as second argument for getNextIndex(i,d)\n   * returns -1, 1 or 0 depending on arrow key\n   * number is then used in math calculations to find the index of the next tab we are navigating to\n   */\n\n\n  var getDirection = function getDirection(evt) {\n    if (match(evt, keys.ArrowLeft)) {\n      return -1;\n    }\n\n    if (match(evt, keys.ArrowRight)) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  var getTabAt = useCallback(function (index) {\n    return tabs.current[index] || React.Children.toArray(children)[index];\n  }, [tabs, children]);\n\n  var scrollTabIntoView = function scrollTabIntoView(event, _ref2) {\n    var index = _ref2.index;\n    var tab = getTabAt(index);\n\n    if (matches(event, [keys.ArrowLeft, keys.ArrowRight]) || event.type === 'click') {\n      var _tab$tabAnchor, _tab$tabAnchor2;\n\n      var currentScrollLeft = tablistScrollLeft;\n      tab === null || tab === void 0 ? void 0 : (_tab$tabAnchor = tab.tabAnchor) === null || _tab$tabAnchor === void 0 ? void 0 : _tab$tabAnchor.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest'\n      });\n      tab === null || tab === void 0 ? void 0 : (_tab$tabAnchor2 = tab.tabAnchor) === null || _tab$tabAnchor2 === void 0 ? void 0 : _tab$tabAnchor2.focus();\n      var newScrollLeft = tablist.current.scrollLeft;\n\n      if (newScrollLeft > currentScrollLeft) {\n        tablist.current.scrollLeft += OVERFLOW_BUTTON_OFFSET;\n      }\n    }\n  };\n  /**\n   * selecting tab on click and on keyboard nav\n   * index = tab to be selected, returned in handleTabKeyDown\n   * onSelectionChange = optional prop for event handler\n   */\n\n\n  var selectTabAt = function selectTabAt(event, _ref3) {\n    var index = _ref3.index,\n        onSelectionChange = _ref3.onSelectionChange;\n    scrollTabIntoView(event, {\n      index: index\n    });\n\n    if (isSelected !== index) {\n      setIsSelected(index);\n      setPrevSelected(index);\n\n      if (typeof onSelectionChange === 'function') {\n        onSelectionChange(index);\n      }\n    }\n  };\n  /**\n   *  keyboard event handler\n   */\n\n\n  var handleTabKeyDown = function handleTabKeyDown(onSelectionChange) {\n    return function (index, evt) {\n      if (matches(evt, [keys.Enter, keys.Space])) {\n        selectTabAt(evt, {\n          index: index,\n          onSelectionChange: onSelectionChange\n        });\n      }\n\n      var nextIndex = function () {\n        if (matches(evt, [keys.ArrowLeft, keys.ArrowRight])) {\n          return getNextIndex(index, getDirection(evt));\n        }\n\n        if (match(evt, keys.Home)) {\n          return 0;\n        }\n\n        if (match(evt, keys.End)) {\n          return getEnabledTabs().pop();\n        }\n      }();\n\n      var tab = getTabAt(nextIndex); // updating selected tab\n\n      if (matches(evt, [keys.ArrowLeft, keys.ArrowRight, keys.Home, keys.End])) {\n        evt.preventDefault();\n\n        if (selectionMode !== 'manual') {\n          selectTabAt(evt, {\n            index: nextIndex,\n            onSelectionChange: onSelectionChange\n          });\n        } else {\n          scrollTabIntoView(evt, {\n            index: nextIndex\n          });\n        }\n\n        tab === null || tab === void 0 ? void 0 : tab.focus();\n      }\n    };\n  };\n\n  var getTabs = function getTabs() {\n    return React.Children.map(children, function (tab) {\n      return tab;\n    });\n  };\n  /**\n   *  click handler\n   *  passed down to Tab children as a prop in `tabsWithProps`\n   *  following functions (handle*) are Props on Tab.js, see Tab.js for parameters\n   */\n\n\n  var handleTabClick = function handleTabClick(onSelectionChange) {\n    return function (index, evt) {\n      evt.preventDefault();\n      selectTabAt(evt, {\n        index: index,\n        onSelectionChange: onSelectionChange\n      });\n    };\n  };\n  /**\n   * creates an array of all the child tab items\n   */\n\n\n  var setTabAt = function setTabAt(index, tabRef) {\n    tabs.current[index] = tabRef;\n  };\n\n  var overflowNavInterval = null;\n  /**\n   * group - overflow scroll\n   * scrolling via overflow btn click\n   * click handler for scrollable tabs L/R arrow buttons\n   */\n\n  var handleOverflowNavClick = function handleOverflowNavClick(_, _ref4) {\n    var direction = _ref4.direction,\n        _ref4$multiplier = _ref4.multiplier,\n        multiplier = _ref4$multiplier === void 0 ? 10 : _ref4$multiplier; // account for overflow button appearing and causing tablist width change\n\n    var _tablist$current2 = tablist === null || tablist === void 0 ? void 0 : tablist.current,\n        clientWidth = _tablist$current2.clientWidth,\n        scrollLeft = _tablist$current2.scrollLeft,\n        scrollWidth = _tablist$current2.scrollWidth;\n\n    if (direction === 1 && !scrollLeft) {\n      tablist.current.scrollLeft += OVERFLOW_BUTTON_OFFSET;\n    }\n\n    tablist.current.scrollLeft += direction * multiplier;\n    var leftEdgeReached = direction === -1 && scrollLeft < OVERFLOW_BUTTON_OFFSET;\n    var rightEdgeReached = direction === 1 && scrollLeft + clientWidth >= scrollWidth - OVERFLOW_BUTTON_OFFSET;\n\n    if (leftEdgeReached || rightEdgeReached) {\n      if (leftEdgeReached) {\n        var _rightOverflowNavButt;\n\n        rightOverflowNavButton === null || rightOverflowNavButton === void 0 ? void 0 : (_rightOverflowNavButt = rightOverflowNavButton.current) === null || _rightOverflowNavButt === void 0 ? void 0 : _rightOverflowNavButt.focus();\n      }\n\n      if (rightEdgeReached) {\n        var _leftOverflowNavButto;\n\n        leftOverflowNavButton === null || leftOverflowNavButton === void 0 ? void 0 : (_leftOverflowNavButto = leftOverflowNavButton.current) === null || _leftOverflowNavButto === void 0 ? void 0 : _leftOverflowNavButto.focus();\n      }\n    }\n  };\n  /**\n   * group - overflow scroll\n   * scrolling w/ mouse event\n   * mousedown handler for scrollable tabs\n   */\n\n\n  var handleOverflowNavMouseDown = function handleOverflowNavMouseDown(event, _ref5) {\n    var direction = _ref5.direction; // disregard mouse buttons aside from LMB\n\n    if (event.buttons !== 1) {\n      return;\n    }\n\n    overflowNavInterval = setInterval(function () {\n      var _tablist$current3 = tablist === null || tablist === void 0 ? void 0 : tablist.current,\n          clientWidth = _tablist$current3.clientWidth,\n          scrollLeft = _tablist$current3.scrollLeft,\n          scrollWidth = _tablist$current3.scrollWidth; // clear interval if scroll reaches left or right edge\n\n\n      var leftEdgeReached = direction === -1 && scrollLeft < OVERFLOW_BUTTON_OFFSET;\n      var rightEdgeReached = direction === 1 && scrollLeft + clientWidth >= scrollWidth - OVERFLOW_BUTTON_OFFSET;\n\n      if (leftEdgeReached || rightEdgeReached) {\n        clearInterval(overflowNavInterval);\n      } // account for overflow button appearing and causing tablist width change\n\n\n      handleOverflowNavClick(event, {\n        direction: direction\n      });\n    });\n  };\n  /**\n   * group - overflow scroll\n   * scrolling w/ mouse event\n   * mouseup handler for scrollable tabs\n   */\n\n\n  var handleOverflowNavMouseUp = function handleOverflowNavMouseUp() {\n    clearInterval(overflowNavInterval);\n  };\n  /**\n   * only run once - component did mount equivalent\n   */\n\n\n  useEffect(function () {\n    _debouncedHandleWindowResize.current = debounce(_handleWindowResize, 200);\n\n    _handleWindowResize();\n\n    window.addEventListener('resize', _debouncedHandleWindowResize.current); // scroll selected tab into view on mount\n\n    var _ref6 = (tablist === null || tablist === void 0 ? void 0 : tablist.current) || {},\n        clientWidth = _ref6.clientWidth,\n        scrollLeft = _ref6.scrollLeft,\n        scrollWidth = _ref6.scrollWidth;\n\n    setTablistClientWidth(clientWidth);\n    setTablistScrollWidth(scrollWidth);\n    setTablistScrollLeft(scrollLeft);\n    var tab = getTabAt(isSelected);\n    var horizontalOverflow = scrollWidth > clientWidth;\n\n    if (horizontalOverflow) {\n      var _tab$tabAnchor3, _tab$tabAnchor4, _tab$tabAnchor5;\n\n      var _leftOverflowNavButtonHidden = (tab === null || tab === void 0 ? void 0 : (_tab$tabAnchor3 = tab.tabAnchor) === null || _tab$tabAnchor3 === void 0 ? void 0 : _tab$tabAnchor3.getBoundingClientRect().right) < (tab === null || tab === void 0 ? void 0 : (_tab$tabAnchor4 = tab.tabAnchor) === null || _tab$tabAnchor4 === void 0 ? void 0 : _tab$tabAnchor4.offsetParent.getBoundingClientRect().right);\n\n      var _rightOverflowNavButtonHidden = scrollLeft + clientWidth === scrollWidth;\n\n      scrollIntoView && (tab === null || tab === void 0 ? void 0 : (_tab$tabAnchor5 = tab.tabAnchor) === null || _tab$tabAnchor5 === void 0 ? void 0 : _tab$tabAnchor5.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest'\n      })); // account for overflow buttons in scroll position on mount\n\n      if (!_leftOverflowNavButtonHidden && !_rightOverflowNavButtonHidden) {\n        tablist.current.scrollLeft += OVERFLOW_BUTTON_OFFSET * 2;\n      }\n    } //component will unmount equivalent\n\n\n    return function () {\n      if (_debouncedHandleWindowResize.current) {\n        _debouncedHandleWindowResize.current.cancel();\n      }\n\n      window.removeEventListener('resize', _debouncedHandleWindowResize.current);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /**\n   * component did update equivalent\n   */\n\n  useEffect(function () {\n    // compare current tablist properties to current state\n    var _tablist$current4 = tablist.current,\n        currentTablistClientWidth = _tablist$current4.clientWidth,\n        currentTablistScrollLeft = _tablist$current4.scrollLeft,\n        currentTablistScrollWidth = _tablist$current4.scrollWidth;\n\n    if (currentTablistClientWidth !== tablistClientWidth || currentTablistScrollLeft !== tablistScrollLeft || currentTablistScrollWidth !== tablistScrollWidth) {\n      setTablistClientWidth(currentTablistClientWidth);\n      setTablistScrollWidth(currentTablistScrollWidth);\n      setTablistScrollLeft(currentTablistScrollLeft);\n      setHorizontalOverflow(currentTablistScrollWidth > currentTablistClientWidth);\n    }\n\n    if (scrollIntoView && prevSelected !== isSelected) {\n      var _getTabAt, _getTabAt$tabAnchor;\n\n      (_getTabAt = getTabAt(isSelected)) === null || _getTabAt === void 0 ? void 0 : (_getTabAt$tabAnchor = _getTabAt.tabAnchor) === null || _getTabAt$tabAnchor === void 0 ? void 0 : _getTabAt$tabAnchor.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest'\n      });\n    }\n  }, [isSelected, prevSelected, scrollIntoView, tablistClientWidth, tablistScrollLeft, tablistScrollWidth, getTabAt]);\n  /**\n   * The tab panel acts like a tab panel when the screen is wider, but acts\n   * like a select list when the screen is narrow.  In the wide case we want\n   * to allow the user to use the tab key to set the focus in the tab panel\n   * and then use the left and right arrow keys to navigate the tabs.  In the\n   * narrow case we want to use the tab key to select different options in\n   * the list.\n   *\n   * We set the tab index based on the different states so the browser will treat\n   * the whole tab panel as a single focus component when it looks like a tab\n   * panel and separate components when it looks like a select list.\n   */\n\n  var tabsWithProps = getTabs().map(function (tab, index) {\n    var tabIndex = index === isSelected ? 0 : -1;\n    var newTab = /*#__PURE__*/React.cloneElement(tab, {\n      index: index,\n      selected: index === isSelected,\n      handleTabClick: handleTabClick(onSelectionChange),\n      tabIndex: tabIndex,\n      ref: function ref(e) {\n        setTabAt(index, e);\n      },\n      handleTabKeyDown: handleTabKeyDown(onSelectionChange)\n    });\n    return newTab;\n  });\n  var tabContentWithProps = React.Children.map(tabsWithProps, function (tab) {\n    var _tab$props = tab.props,\n        tabId = _tab$props.id,\n        children = _tab$props.children,\n        selected = _tab$props.selected,\n        _tab$props$renderCont = _tab$props.renderContent,\n        Content = _tab$props$renderCont === void 0 ? TabContent : _tab$props$renderCont;\n    return /*#__PURE__*/React.createElement(Content, {\n      id: tabId && \"\".concat(tabId, \"__panel\"),\n      className: tabContentClassName,\n      hidden: !selected,\n      selected: selected,\n      \"aria-labelledby\": tabId\n    }, children);\n  });\n  var leftOverflowNavButtonHidden = !horizontalOverflow || !tablistScrollLeft;\n  var rightOverflowNavButtonHidden = !horizontalOverflow || tablistScrollLeft + tablistClientWidth === tablistScrollWidth;\n  var classes = {\n    // TODO: remove scrollable from classnames in next major release and uncomment classnames that don't contain scrollable\n    tabs: classNames(className, // `${prefix}--tabs`,\n    \"\".concat(prefix, \"--tabs--scrollable\"), \"\".concat(prefix, \"--tabs--scrollable--container\"), _defineProperty({}, \"\".concat(prefix, \"--tabs--scrollable--light\"), light)),\n    // TODO: remove scrollable from classnames in next major release and uncomment classnames that don't contain scrollable\n    tablist: classNames( // `${prefix}--tabs__nav`,\n    \"\".concat(prefix, \"--tabs--scrollable__nav\")),\n    leftOverflowButtonClasses: classNames((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefix, \"--tab--overflow-nav-button\"), horizontalOverflow), _defineProperty(_classNames2, \"\".concat(prefix, \"--tab--overflow-nav-button--hidden\"), leftOverflowNavButtonHidden), _classNames2)),\n    rightOverflowButtonClasses: classNames((_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefix, \"--tab--overflow-nav-button\"), horizontalOverflow), _defineProperty(_classNames3, \"\".concat(prefix, \"--tab--overflow-nav-button--hidden\"), rightOverflowNavButtonHidden), _classNames3))\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: classes.tabs,\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"button\", _extends({\n    \"aria-hidden\": \"true\",\n    \"aria-label\": \"Scroll left\",\n    className: classes.leftOverflowButtonClasses,\n    onClick: function onClick(_) {\n      return handleOverflowNavClick(_, {\n        direction: -1\n      });\n    },\n    onMouseDown: function onMouseDown(event) {\n      return handleOverflowNavMouseDown(event, {\n        direction: -1\n      });\n    },\n    onMouseUp: handleOverflowNavMouseUp,\n    ref: leftOverflowNavButton,\n    tabIndex: \"-1\",\n    type: \"button\"\n  }, leftOverflowButtonProps), /*#__PURE__*/React.createElement(ChevronLeft16, null)), !leftOverflowNavButtonHidden && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--tabs__overflow-indicator--left\")\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    role: \"tablist\",\n    tabIndex: -1,\n    className: classes.tablist,\n    ref: tablist,\n    onScroll: handleScroll\n  }, tabsWithProps), !rightOverflowNavButtonHidden && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--tabs__overflow-indicator--right\")\n  }), /*#__PURE__*/React.createElement(\"button\", _extends({\n    \"aria-hidden\": \"true\",\n    \"aria-label\": \"Scroll right\",\n    className: classes.rightOverflowButtonClasses,\n    onClick: function onClick(_) {\n      return handleOverflowNavClick(_, {\n        direction: 1\n      });\n    },\n    onMouseDown: function onMouseDown(event) {\n      return handleOverflowNavMouseDown(event, {\n        direction: 1\n      });\n    },\n    onMouseUp: handleOverflowNavMouseUp,\n    ref: rightOverflowNavButton,\n    tabIndex: \"-1\",\n    type: \"button\"\n  }, rightOverflowButtonProps), /*#__PURE__*/React.createElement(ChevronRight16, null))), tabContentWithProps);\n});\nContainedTabs.propTypes = {\n  /**\n   * Pass in a collection of <Tab> children to be rendered depending on the\n   * currently selected tab\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide a className that is applied to the root <div> component for the\n   * <Tabs>\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the Tab content is hidden\n   */\n  hidden: PropTypes.bool,\n\n  /**\n   * Provide the props that describe the left overflow button\n   */\n  leftOverflowButtonProps: PropTypes.object,\n\n  /**\n   * Specify whether or not to use the light component variant\n   */\n  light: deprecate(PropTypes.bool, 'The light prop has been deprecated in v11 in favor of our new layering model that uses the Layer component'),\n\n  /**\n   * Optionally provide an `onClick` handler that is invoked when a <Tab> is\n   * clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Optionally provide an `onKeyDown` handler that is invoked when keyed\n   * navigation is triggered\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Provide an optional handler that is called whenever the selection\n   * changes. This method is called with the index of the tab that was\n   * selected\n   */\n  onSelectionChange: PropTypes.func,\n\n  /**\n   * Provide the props that describe the right overflow button\n   */\n  rightOverflowButtonProps: PropTypes.object,\n\n  /**\n   * Choose whether or not to automatically scroll to newly selected tabs\n   * on component rerender\n   */\n  scrollIntoView: PropTypes.bool,\n\n  /**\n   * Optionally provide an index for the currently selected <Tab>\n   */\n  selected: PropTypes.number,\n\n  /**\n   * Choose whether or not to automatically change selection on focus\n   */\n  selectionMode: PropTypes.oneOf(['automatic', 'manual']),\n\n  /**\n   * Provide a className that is applied to the <TabContent> components\n   */\n  tabContentClassName: PropTypes.string //   /**\n  //    * Provide the type of Tab\n  //    */\n  //   type: PropTypes.oneOf(['default', 'container']),\n\n};\nexport default ContainedTabs;","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/datacap-ui/node_modules/carbon-components-react/es/components/Tabs/next/ContainedTabs.js"],"names":["_extends","_defineProperty","_slicedToArray","_objectWithoutProperties","_excluded","PropTypes","React","useState","useRef","useEffect","useCallback","classNames","ChevronLeft16","ChevronRight16","debounce","keys","match","matches","TabContent","deprecate","usePrefix","ContainedTabs","forwardRef","_ref","ref","_classNames2","_classNames3","children","className","leftOverflowButtonProps","_ref$light","light","onSelectionChange","rightOverflowButtonProps","_ref$scrollIntoView","scrollIntoView","_ref$selected","selected","_ref$selectionMode","selectionMode","tabContentClassName","other","prefix","tablist","leftOverflowNavButton","rightOverflowNavButton","tabs","_useState","_useState2","horizontalOverflow","setHorizontalOverflow","_useState3","_useState4","tablistClientWidth","setTablistClientWidth","_useState5","_useState6","tablistScrollWidth","setTablistScrollWidth","_useState7","_useState8","tablistScrollLeft","setTablistScrollLeft","_useState9","_useState10","isSelected","setIsSelected","_useState11","_useState12","prevSelected","setPrevSelected","OVERFLOW_BUTTON_OFFSET","handleScroll","current","_tablist$current","clientWidth","scrollLeft","scrollWidth","_debouncedHandleWindowResize","_handleWindowResize","getEnabledTabs","Children","toArray","reduce","enabledTabs","tab","index","props","disabled","concat","getNextIndex","direction","nextIndex","Math","max","indexOf","nextIndexLooped","length","sign","getDirection","evt","ArrowLeft","ArrowRight","getTabAt","scrollTabIntoView","event","_ref2","type","_tab$tabAnchor","_tab$tabAnchor2","currentScrollLeft","tabAnchor","block","inline","focus","newScrollLeft","selectTabAt","_ref3","handleTabKeyDown","Enter","Space","Home","End","pop","preventDefault","getTabs","map","handleTabClick","setTabAt","tabRef","overflowNavInterval","handleOverflowNavClick","_","_ref4","_ref4$multiplier","multiplier","_tablist$current2","leftEdgeReached","rightEdgeReached","_rightOverflowNavButt","_leftOverflowNavButto","handleOverflowNavMouseDown","_ref5","buttons","setInterval","_tablist$current3","clearInterval","handleOverflowNavMouseUp","window","addEventListener","_ref6","_tab$tabAnchor3","_tab$tabAnchor4","_tab$tabAnchor5","_leftOverflowNavButtonHidden","getBoundingClientRect","right","offsetParent","_rightOverflowNavButtonHidden","cancel","removeEventListener","_tablist$current4","currentTablistClientWidth","currentTablistScrollLeft","currentTablistScrollWidth","_getTabAt","_getTabAt$tabAnchor","tabsWithProps","tabIndex","newTab","cloneElement","e","tabContentWithProps","_tab$props","tabId","id","_tab$props$renderCont","renderContent","Content","createElement","hidden","leftOverflowNavButtonHidden","rightOverflowNavButtonHidden","classes","leftOverflowButtonClasses","rightOverflowButtonClasses","Fragment","onClick","onMouseDown","onMouseUp","role","onScroll","propTypes","node","string","bool","object","func","onKeyDown","number","oneOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"className\", \"leftOverflowButtonProps\", \"light\", \"onSelectionChange\", \"rightOverflowButtonProps\", \"scrollIntoView\", \"selected\", \"selectionMode\", \"tabContentClassName\"];\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { ChevronLeft16, ChevronRight16 } from '@carbon/icons-react';\nimport debounce from 'lodash.debounce';\nimport { keys, match, matches } from '../../../internal/keyboard';\nimport TabContent from '../../TabContent';\nimport deprecate from '../../../prop-types/deprecate';\nimport { usePrefix } from '../../../internal/usePrefix';\nvar ContainedTabs = /*#__PURE__*/React.forwardRef(function ContainedTabs(_ref, ref) {\n  var _classNames2, _classNames3;\n\n  var children = _ref.children,\n      className = _ref.className,\n      leftOverflowButtonProps = _ref.leftOverflowButtonProps,\n      _ref$light = _ref.light,\n      light = _ref$light === void 0 ? false : _ref$light,\n      onSelectionChange = _ref.onSelectionChange,\n      rightOverflowButtonProps = _ref.rightOverflowButtonProps,\n      _ref$scrollIntoView = _ref.scrollIntoView,\n      scrollIntoView = _ref$scrollIntoView === void 0 ? true : _ref$scrollIntoView,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? 0 : _ref$selected,\n      _ref$selectionMode = _ref.selectionMode,\n      selectionMode = _ref$selectionMode === void 0 ? 'automatic' : _ref$selectionMode,\n      tabContentClassName = _ref.tabContentClassName,\n      other = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix(); //refs\n\n  var tablist = useRef();\n  var leftOverflowNavButton = useRef();\n  var rightOverflowNavButton = useRef();\n  var tabs = useRef([]); //states\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      horizontalOverflow = _useState2[0],\n      setHorizontalOverflow = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tablistClientWidth = _useState4[0],\n      setTablistClientWidth = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tablistScrollWidth = _useState6[0],\n      setTablistScrollWidth = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tablistScrollLeft = _useState8[0],\n      setTablistScrollLeft = _useState8[1];\n\n  var _useState9 = useState(selected),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isSelected = _useState10[0],\n      setIsSelected = _useState10[1];\n\n  var _useState11 = useState(isSelected),\n      _useState12 = _slicedToArray(_useState11, 2),\n      prevSelected = _useState12[0],\n      setPrevSelected = _useState12[1];\n  /**\n   * prop + state alignment - getDerivedStateFromProps\n   * only update if selected prop changes\n   */\n\n\n  useEffect(function () {\n    if (selected !== prevSelected) {\n      setIsSelected(selected);\n      setPrevSelected(selected);\n    }\n  }, [selected]); //eslint-disable-line react-hooks/exhaustive-deps\n  // width of the overflow buttons\n\n  var OVERFLOW_BUTTON_OFFSET = 40;\n  /**\n   * `scroll` event handler to save tablist clientWidth, scrollWidth, and\n   * scrollLeft\n   */\n\n  var handleScroll = function handleScroll() {\n    if (!(tablist !== null && tablist !== void 0 && tablist.current)) {\n      return;\n    }\n\n    var _tablist$current = tablist.current,\n        clientWidth = _tablist$current.clientWidth,\n        scrollLeft = _tablist$current.scrollLeft,\n        scrollWidth = _tablist$current.scrollWidth;\n    setTablistClientWidth(clientWidth);\n    setTablistScrollWidth(scrollWidth);\n    setTablistScrollLeft(scrollLeft);\n    setHorizontalOverflow(scrollWidth > clientWidth);\n  };\n  /**\n   * The debounced version of the `resize` event handler.\n   * @type {Function}\n   * @private\n   */\n\n\n  var _debouncedHandleWindowResize = useRef();\n\n  var _handleWindowResize = handleScroll;\n  /**\n   * returns all tabs that are not disabled\n   * used for keyboard navigation\n   */\n\n  var getEnabledTabs = function getEnabledTabs() {\n    return React.Children.toArray(children).reduce(function (enabledTabs, tab, index) {\n      return !tab.props.disabled ? enabledTabs.concat(index) : enabledTabs;\n    }, []);\n  };\n  /**\n   * returns the index of the next tab we are going to when navigating L/R arrow keys (i.e. 0, 1, 2)\n   * used in handleTabKeyDown to get the next index after keyboard arrow evt, which then updates selected tab\n   */\n\n\n  var getNextIndex = function getNextIndex(index, direction) {\n    var enabledTabs = getEnabledTabs();\n    var nextIndex = Math.max(enabledTabs.indexOf(index) + direction, // For `tab` not found in `enabledTabs`\n    -1);\n    var nextIndexLooped = nextIndex >= 0 && nextIndex < enabledTabs.length ? nextIndex : nextIndex - Math.sign(nextIndex) * enabledTabs.length;\n    return enabledTabs[nextIndexLooped];\n  };\n  /**\n   * used as second argument for getNextIndex(i,d)\n   * returns -1, 1 or 0 depending on arrow key\n   * number is then used in math calculations to find the index of the next tab we are navigating to\n   */\n\n\n  var getDirection = function getDirection(evt) {\n    if (match(evt, keys.ArrowLeft)) {\n      return -1;\n    }\n\n    if (match(evt, keys.ArrowRight)) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  var getTabAt = useCallback(function (index) {\n    return tabs.current[index] || React.Children.toArray(children)[index];\n  }, [tabs, children]);\n\n  var scrollTabIntoView = function scrollTabIntoView(event, _ref2) {\n    var index = _ref2.index;\n    var tab = getTabAt(index);\n\n    if (matches(event, [keys.ArrowLeft, keys.ArrowRight]) || event.type === 'click') {\n      var _tab$tabAnchor, _tab$tabAnchor2;\n\n      var currentScrollLeft = tablistScrollLeft;\n      tab === null || tab === void 0 ? void 0 : (_tab$tabAnchor = tab.tabAnchor) === null || _tab$tabAnchor === void 0 ? void 0 : _tab$tabAnchor.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest'\n      });\n      tab === null || tab === void 0 ? void 0 : (_tab$tabAnchor2 = tab.tabAnchor) === null || _tab$tabAnchor2 === void 0 ? void 0 : _tab$tabAnchor2.focus();\n      var newScrollLeft = tablist.current.scrollLeft;\n\n      if (newScrollLeft > currentScrollLeft) {\n        tablist.current.scrollLeft += OVERFLOW_BUTTON_OFFSET;\n      }\n    }\n  };\n  /**\n   * selecting tab on click and on keyboard nav\n   * index = tab to be selected, returned in handleTabKeyDown\n   * onSelectionChange = optional prop for event handler\n   */\n\n\n  var selectTabAt = function selectTabAt(event, _ref3) {\n    var index = _ref3.index,\n        onSelectionChange = _ref3.onSelectionChange;\n    scrollTabIntoView(event, {\n      index: index\n    });\n\n    if (isSelected !== index) {\n      setIsSelected(index);\n      setPrevSelected(index);\n\n      if (typeof onSelectionChange === 'function') {\n        onSelectionChange(index);\n      }\n    }\n  };\n  /**\n   *  keyboard event handler\n   */\n\n\n  var handleTabKeyDown = function handleTabKeyDown(onSelectionChange) {\n    return function (index, evt) {\n      if (matches(evt, [keys.Enter, keys.Space])) {\n        selectTabAt(evt, {\n          index: index,\n          onSelectionChange: onSelectionChange\n        });\n      }\n\n      var nextIndex = function () {\n        if (matches(evt, [keys.ArrowLeft, keys.ArrowRight])) {\n          return getNextIndex(index, getDirection(evt));\n        }\n\n        if (match(evt, keys.Home)) {\n          return 0;\n        }\n\n        if (match(evt, keys.End)) {\n          return getEnabledTabs().pop();\n        }\n      }();\n\n      var tab = getTabAt(nextIndex); // updating selected tab\n\n      if (matches(evt, [keys.ArrowLeft, keys.ArrowRight, keys.Home, keys.End])) {\n        evt.preventDefault();\n\n        if (selectionMode !== 'manual') {\n          selectTabAt(evt, {\n            index: nextIndex,\n            onSelectionChange: onSelectionChange\n          });\n        } else {\n          scrollTabIntoView(evt, {\n            index: nextIndex\n          });\n        }\n\n        tab === null || tab === void 0 ? void 0 : tab.focus();\n      }\n    };\n  };\n\n  var getTabs = function getTabs() {\n    return React.Children.map(children, function (tab) {\n      return tab;\n    });\n  };\n  /**\n   *  click handler\n   *  passed down to Tab children as a prop in `tabsWithProps`\n   *  following functions (handle*) are Props on Tab.js, see Tab.js for parameters\n   */\n\n\n  var handleTabClick = function handleTabClick(onSelectionChange) {\n    return function (index, evt) {\n      evt.preventDefault();\n      selectTabAt(evt, {\n        index: index,\n        onSelectionChange: onSelectionChange\n      });\n    };\n  };\n  /**\n   * creates an array of all the child tab items\n   */\n\n\n  var setTabAt = function setTabAt(index, tabRef) {\n    tabs.current[index] = tabRef;\n  };\n\n  var overflowNavInterval = null;\n  /**\n   * group - overflow scroll\n   * scrolling via overflow btn click\n   * click handler for scrollable tabs L/R arrow buttons\n   */\n\n  var handleOverflowNavClick = function handleOverflowNavClick(_, _ref4) {\n    var direction = _ref4.direction,\n        _ref4$multiplier = _ref4.multiplier,\n        multiplier = _ref4$multiplier === void 0 ? 10 : _ref4$multiplier;\n\n    // account for overflow button appearing and causing tablist width change\n    var _tablist$current2 = tablist === null || tablist === void 0 ? void 0 : tablist.current,\n        clientWidth = _tablist$current2.clientWidth,\n        scrollLeft = _tablist$current2.scrollLeft,\n        scrollWidth = _tablist$current2.scrollWidth;\n\n    if (direction === 1 && !scrollLeft) {\n      tablist.current.scrollLeft += OVERFLOW_BUTTON_OFFSET;\n    }\n\n    tablist.current.scrollLeft += direction * multiplier;\n    var leftEdgeReached = direction === -1 && scrollLeft < OVERFLOW_BUTTON_OFFSET;\n    var rightEdgeReached = direction === 1 && scrollLeft + clientWidth >= scrollWidth - OVERFLOW_BUTTON_OFFSET;\n\n    if (leftEdgeReached || rightEdgeReached) {\n      if (leftEdgeReached) {\n        var _rightOverflowNavButt;\n\n        rightOverflowNavButton === null || rightOverflowNavButton === void 0 ? void 0 : (_rightOverflowNavButt = rightOverflowNavButton.current) === null || _rightOverflowNavButt === void 0 ? void 0 : _rightOverflowNavButt.focus();\n      }\n\n      if (rightEdgeReached) {\n        var _leftOverflowNavButto;\n\n        leftOverflowNavButton === null || leftOverflowNavButton === void 0 ? void 0 : (_leftOverflowNavButto = leftOverflowNavButton.current) === null || _leftOverflowNavButto === void 0 ? void 0 : _leftOverflowNavButto.focus();\n      }\n    }\n  };\n  /**\n   * group - overflow scroll\n   * scrolling w/ mouse event\n   * mousedown handler for scrollable tabs\n   */\n\n\n  var handleOverflowNavMouseDown = function handleOverflowNavMouseDown(event, _ref5) {\n    var direction = _ref5.direction;\n\n    // disregard mouse buttons aside from LMB\n    if (event.buttons !== 1) {\n      return;\n    }\n\n    overflowNavInterval = setInterval(function () {\n      var _tablist$current3 = tablist === null || tablist === void 0 ? void 0 : tablist.current,\n          clientWidth = _tablist$current3.clientWidth,\n          scrollLeft = _tablist$current3.scrollLeft,\n          scrollWidth = _tablist$current3.scrollWidth; // clear interval if scroll reaches left or right edge\n\n\n      var leftEdgeReached = direction === -1 && scrollLeft < OVERFLOW_BUTTON_OFFSET;\n      var rightEdgeReached = direction === 1 && scrollLeft + clientWidth >= scrollWidth - OVERFLOW_BUTTON_OFFSET;\n\n      if (leftEdgeReached || rightEdgeReached) {\n        clearInterval(overflowNavInterval);\n      } // account for overflow button appearing and causing tablist width change\n\n\n      handleOverflowNavClick(event, {\n        direction: direction\n      });\n    });\n  };\n  /**\n   * group - overflow scroll\n   * scrolling w/ mouse event\n   * mouseup handler for scrollable tabs\n   */\n\n\n  var handleOverflowNavMouseUp = function handleOverflowNavMouseUp() {\n    clearInterval(overflowNavInterval);\n  };\n  /**\n   * only run once - component did mount equivalent\n   */\n\n\n  useEffect(function () {\n    _debouncedHandleWindowResize.current = debounce(_handleWindowResize, 200);\n\n    _handleWindowResize();\n\n    window.addEventListener('resize', _debouncedHandleWindowResize.current); // scroll selected tab into view on mount\n\n    var _ref6 = (tablist === null || tablist === void 0 ? void 0 : tablist.current) || {},\n        clientWidth = _ref6.clientWidth,\n        scrollLeft = _ref6.scrollLeft,\n        scrollWidth = _ref6.scrollWidth;\n\n    setTablistClientWidth(clientWidth);\n    setTablistScrollWidth(scrollWidth);\n    setTablistScrollLeft(scrollLeft);\n    var tab = getTabAt(isSelected);\n    var horizontalOverflow = scrollWidth > clientWidth;\n\n    if (horizontalOverflow) {\n      var _tab$tabAnchor3, _tab$tabAnchor4, _tab$tabAnchor5;\n\n      var _leftOverflowNavButtonHidden = (tab === null || tab === void 0 ? void 0 : (_tab$tabAnchor3 = tab.tabAnchor) === null || _tab$tabAnchor3 === void 0 ? void 0 : _tab$tabAnchor3.getBoundingClientRect().right) < (tab === null || tab === void 0 ? void 0 : (_tab$tabAnchor4 = tab.tabAnchor) === null || _tab$tabAnchor4 === void 0 ? void 0 : _tab$tabAnchor4.offsetParent.getBoundingClientRect().right);\n\n      var _rightOverflowNavButtonHidden = scrollLeft + clientWidth === scrollWidth;\n\n      scrollIntoView && (tab === null || tab === void 0 ? void 0 : (_tab$tabAnchor5 = tab.tabAnchor) === null || _tab$tabAnchor5 === void 0 ? void 0 : _tab$tabAnchor5.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest'\n      })); // account for overflow buttons in scroll position on mount\n\n      if (!_leftOverflowNavButtonHidden && !_rightOverflowNavButtonHidden) {\n        tablist.current.scrollLeft += OVERFLOW_BUTTON_OFFSET * 2;\n      }\n    } //component will unmount equivalent\n\n\n    return function () {\n      if (_debouncedHandleWindowResize.current) {\n        _debouncedHandleWindowResize.current.cancel();\n      }\n\n      window.removeEventListener('resize', _debouncedHandleWindowResize.current);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /**\n   * component did update equivalent\n   */\n\n  useEffect(function () {\n    // compare current tablist properties to current state\n    var _tablist$current4 = tablist.current,\n        currentTablistClientWidth = _tablist$current4.clientWidth,\n        currentTablistScrollLeft = _tablist$current4.scrollLeft,\n        currentTablistScrollWidth = _tablist$current4.scrollWidth;\n\n    if (currentTablistClientWidth !== tablistClientWidth || currentTablistScrollLeft !== tablistScrollLeft || currentTablistScrollWidth !== tablistScrollWidth) {\n      setTablistClientWidth(currentTablistClientWidth);\n      setTablistScrollWidth(currentTablistScrollWidth);\n      setTablistScrollLeft(currentTablistScrollLeft);\n      setHorizontalOverflow(currentTablistScrollWidth > currentTablistClientWidth);\n    }\n\n    if (scrollIntoView && prevSelected !== isSelected) {\n      var _getTabAt, _getTabAt$tabAnchor;\n\n      (_getTabAt = getTabAt(isSelected)) === null || _getTabAt === void 0 ? void 0 : (_getTabAt$tabAnchor = _getTabAt.tabAnchor) === null || _getTabAt$tabAnchor === void 0 ? void 0 : _getTabAt$tabAnchor.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest'\n      });\n    }\n  }, [isSelected, prevSelected, scrollIntoView, tablistClientWidth, tablistScrollLeft, tablistScrollWidth, getTabAt]);\n  /**\n   * The tab panel acts like a tab panel when the screen is wider, but acts\n   * like a select list when the screen is narrow.  In the wide case we want\n   * to allow the user to use the tab key to set the focus in the tab panel\n   * and then use the left and right arrow keys to navigate the tabs.  In the\n   * narrow case we want to use the tab key to select different options in\n   * the list.\n   *\n   * We set the tab index based on the different states so the browser will treat\n   * the whole tab panel as a single focus component when it looks like a tab\n   * panel and separate components when it looks like a select list.\n   */\n\n  var tabsWithProps = getTabs().map(function (tab, index) {\n    var tabIndex = index === isSelected ? 0 : -1;\n    var newTab = /*#__PURE__*/React.cloneElement(tab, {\n      index: index,\n      selected: index === isSelected,\n      handleTabClick: handleTabClick(onSelectionChange),\n      tabIndex: tabIndex,\n      ref: function ref(e) {\n        setTabAt(index, e);\n      },\n      handleTabKeyDown: handleTabKeyDown(onSelectionChange)\n    });\n    return newTab;\n  });\n  var tabContentWithProps = React.Children.map(tabsWithProps, function (tab) {\n    var _tab$props = tab.props,\n        tabId = _tab$props.id,\n        children = _tab$props.children,\n        selected = _tab$props.selected,\n        _tab$props$renderCont = _tab$props.renderContent,\n        Content = _tab$props$renderCont === void 0 ? TabContent : _tab$props$renderCont;\n    return /*#__PURE__*/React.createElement(Content, {\n      id: tabId && \"\".concat(tabId, \"__panel\"),\n      className: tabContentClassName,\n      hidden: !selected,\n      selected: selected,\n      \"aria-labelledby\": tabId\n    }, children);\n  });\n  var leftOverflowNavButtonHidden = !horizontalOverflow || !tablistScrollLeft;\n  var rightOverflowNavButtonHidden = !horizontalOverflow || tablistScrollLeft + tablistClientWidth === tablistScrollWidth;\n  var classes = {\n    // TODO: remove scrollable from classnames in next major release and uncomment classnames that don't contain scrollable\n    tabs: classNames(className, // `${prefix}--tabs`,\n    \"\".concat(prefix, \"--tabs--scrollable\"), \"\".concat(prefix, \"--tabs--scrollable--container\"), _defineProperty({}, \"\".concat(prefix, \"--tabs--scrollable--light\"), light)),\n    // TODO: remove scrollable from classnames in next major release and uncomment classnames that don't contain scrollable\n    tablist: classNames( // `${prefix}--tabs__nav`,\n    \"\".concat(prefix, \"--tabs--scrollable__nav\")),\n    leftOverflowButtonClasses: classNames((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefix, \"--tab--overflow-nav-button\"), horizontalOverflow), _defineProperty(_classNames2, \"\".concat(prefix, \"--tab--overflow-nav-button--hidden\"), leftOverflowNavButtonHidden), _classNames2)),\n    rightOverflowButtonClasses: classNames((_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefix, \"--tab--overflow-nav-button\"), horizontalOverflow), _defineProperty(_classNames3, \"\".concat(prefix, \"--tab--overflow-nav-button--hidden\"), rightOverflowNavButtonHidden), _classNames3))\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: classes.tabs,\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"button\", _extends({\n    \"aria-hidden\": \"true\",\n    \"aria-label\": \"Scroll left\",\n    className: classes.leftOverflowButtonClasses,\n    onClick: function onClick(_) {\n      return handleOverflowNavClick(_, {\n        direction: -1\n      });\n    },\n    onMouseDown: function onMouseDown(event) {\n      return handleOverflowNavMouseDown(event, {\n        direction: -1\n      });\n    },\n    onMouseUp: handleOverflowNavMouseUp,\n    ref: leftOverflowNavButton,\n    tabIndex: \"-1\",\n    type: \"button\"\n  }, leftOverflowButtonProps), /*#__PURE__*/React.createElement(ChevronLeft16, null)), !leftOverflowNavButtonHidden && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--tabs__overflow-indicator--left\")\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    role: \"tablist\",\n    tabIndex: -1,\n    className: classes.tablist,\n    ref: tablist,\n    onScroll: handleScroll\n  }, tabsWithProps), !rightOverflowNavButtonHidden && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--tabs__overflow-indicator--right\")\n  }), /*#__PURE__*/React.createElement(\"button\", _extends({\n    \"aria-hidden\": \"true\",\n    \"aria-label\": \"Scroll right\",\n    className: classes.rightOverflowButtonClasses,\n    onClick: function onClick(_) {\n      return handleOverflowNavClick(_, {\n        direction: 1\n      });\n    },\n    onMouseDown: function onMouseDown(event) {\n      return handleOverflowNavMouseDown(event, {\n        direction: 1\n      });\n    },\n    onMouseUp: handleOverflowNavMouseUp,\n    ref: rightOverflowNavButton,\n    tabIndex: \"-1\",\n    type: \"button\"\n  }, rightOverflowButtonProps), /*#__PURE__*/React.createElement(ChevronRight16, null))), tabContentWithProps);\n});\nContainedTabs.propTypes = {\n  /**\n   * Pass in a collection of <Tab> children to be rendered depending on the\n   * currently selected tab\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide a className that is applied to the root <div> component for the\n   * <Tabs>\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the Tab content is hidden\n   */\n  hidden: PropTypes.bool,\n\n  /**\n   * Provide the props that describe the left overflow button\n   */\n  leftOverflowButtonProps: PropTypes.object,\n\n  /**\n   * Specify whether or not to use the light component variant\n   */\n  light: deprecate(PropTypes.bool, 'The light prop has been deprecated in v11 in favor of our new layering model that uses the Layer component'),\n\n  /**\n   * Optionally provide an `onClick` handler that is invoked when a <Tab> is\n   * clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Optionally provide an `onKeyDown` handler that is invoked when keyed\n   * navigation is triggered\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Provide an optional handler that is called whenever the selection\n   * changes. This method is called with the index of the tab that was\n   * selected\n   */\n  onSelectionChange: PropTypes.func,\n\n  /**\n   * Provide the props that describe the right overflow button\n   */\n  rightOverflowButtonProps: PropTypes.object,\n\n  /**\n   * Choose whether or not to automatically scroll to newly selected tabs\n   * on component rerender\n   */\n  scrollIntoView: PropTypes.bool,\n\n  /**\n   * Optionally provide an index for the currently selected <Tab>\n   */\n  selected: PropTypes.number,\n\n  /**\n   * Choose whether or not to automatically change selection on focus\n   */\n  selectionMode: PropTypes.oneOf(['automatic', 'manual']),\n\n  /**\n   * Provide a className that is applied to the <TabContent> components\n   */\n  tabContentClassName: PropTypes.string //   /**\n  //    * Provide the type of Tab\n  //    */\n  //   type: PropTypes.oneOf(['default', 'container']),\n\n};\nexport default ContainedTabs;"]},"metadata":{},"sourceType":"module"}
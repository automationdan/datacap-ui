{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _iconTypes;\n\nvar _excluded = [\"children\", \"className\", \"onClick\", \"inline\"],\n    _excluded2 = [\"ariaLabel\", \"className\", \"iconDescription\", \"type\", \"renderIcon\", \"name\", \"notificationType\"],\n    _excluded3 = [\"role\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"children\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"timeout\", \"closeOnEscape\"],\n    _excluded4 = [\"children\", \"role\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"closeOnEscape\"],\n    _excluded5 = [\"actionButtonLabel\", \"children\", \"role\", \"onActionButtonClick\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"inline\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"hasFocus\", \"closeOnEscape\"];\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport cx from 'classnames';\nimport { settings } from 'carbon-components';\nimport { Close20, ErrorFilled20, CheckmarkFilled20, WarningFilled20, WarningAltFilled20, InformationFilled20, InformationSquareFilled20 } from '@carbon/icons-react';\nimport Button from '../../Button';\nimport useIsomorphicEffect from '../../../internal/useIsomorphicEffect';\nimport { useNoInteractiveChildren } from '../../../internal/useNoInteractiveChildren';\nimport { keys, matches } from '../../../internal/keyboard';\nvar prefix = settings.prefix;\n/**\n * Conditionally call a callback when the escape key is pressed\n * @param {node} ref - ref of the container element to scope the functionality to\n * @param {func} callback - function to be called\n * @param {bool} override - escape hatch to conditionally call the callback\n */\n\nfunction useEscapeToClose(ref, callback) {\n  var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var handleKeyDown = function handleKeyDown(event) {\n    // The callback should only be called when focus is on or within the container\n    var elementContainsFocus = ref.current && document.activeElement === ref.current || ref.current.contains(document.activeElement);\n\n    if (matches(event, [keys.Escape]) && override && elementContainsFocus) {\n      callback(event);\n    }\n  };\n\n  useIsomorphicEffect(function () {\n    document.addEventListener('keydown', handleKeyDown, false);\n    return function () {\n      return document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n}\n\nexport function NotificationActionButton(_ref) {\n  var children = _ref.children,\n      customClassName = _ref.className,\n      onClick = _ref.onClick,\n      inline = _ref.inline,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var className = cx(customClassName, _defineProperty({}, \"\".concat(prefix, \"--actionable-notification__action-button\"), true));\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    className: className,\n    kind: inline ? 'ghost' : 'tertiary',\n    onClick: onClick,\n    size: \"sm\"\n  }, rest), children);\n}\nNotificationActionButton.propTypes = {\n  /**\n   * Specify the content of the notification action button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification action button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if the visual treatment of the button should be for an inline notification\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * Optionally specify a click handler for the notification action button.\n   */\n  onClick: PropTypes.func\n};\nexport function NotificationButton(_ref2) {\n  var ariaLabel = _ref2.ariaLabel,\n      className = _ref2.className,\n      iconDescription = _ref2.iconDescription,\n      type = _ref2.type,\n      IconTag = _ref2.renderIcon,\n      name = _ref2.name,\n      notificationType = _ref2.notificationType,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  var buttonClassName = cx(className, _defineProperty({}, \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-button\"), notificationType));\n  var iconClassName = cx(_defineProperty({}, \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-icon\"), notificationType));\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n    // eslint-disable-next-line react/button-has-type\n    type: type,\n    \"aria-label\": iconDescription,\n    title: iconDescription,\n    className: buttonClassName\n  }), IconTag && /*#__PURE__*/React.createElement(IconTag, {\n    \"aria-label\": ariaLabel,\n    className: iconClassName,\n    name: name\n  }));\n}\nNotificationButton.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the notification button\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Specify an optional className to be applied to the notification button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify an optional icon for the Button through a string,\n   * if something but regular \"close\" icon is desirable\n   */\n  name: PropTypes.string,\n\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline', 'actionable']),\n\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: PropTypes.string\n};\nNotificationButton.defaultProps = {\n  ariaLabel: 'close notification',\n  // TODO: deprecate this prop\n  notificationType: 'toast',\n  type: 'button',\n  iconDescription: 'close icon',\n  renderIcon: Close20\n};\nvar iconTypes = (_iconTypes = {\n  error: ErrorFilled20,\n  success: CheckmarkFilled20,\n  warning: WarningFilled20\n}, _defineProperty(_iconTypes, 'warning-alt', WarningAltFilled20), _defineProperty(_iconTypes, \"info\", InformationFilled20), _defineProperty(_iconTypes, 'info-square', InformationSquareFilled20), _iconTypes);\n\nfunction NotificationIcon(_ref3) {\n  var iconDescription = _ref3.iconDescription,\n      kind = _ref3.kind,\n      notificationType = _ref3.notificationType;\n  var IconForKind = iconTypes[kind];\n\n  if (!IconForKind) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(IconForKind, {\n    className: \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__icon\")\n  }, /*#__PURE__*/React.createElement(\"title\", null, iconDescription));\n}\n\nNotificationIcon.propTypes = {\n  iconDescription: PropTypes.string.isRequired,\n  kind: PropTypes.oneOf(['error', 'success', 'warning', 'warning-alt', 'info', 'info-square']).isRequired,\n  notificationType: PropTypes.oneOf(['inline', 'toast']).isRequired\n};\nexport function ToastNotification(_ref4) {\n  var _cx4;\n\n  var role = _ref4.role,\n      onClose = _ref4.onClose,\n      onCloseButtonClick = _ref4.onCloseButtonClick,\n      iconDescription = _ref4.iconDescription,\n      statusIconDescription = _ref4.statusIconDescription,\n      className = _ref4.className,\n      children = _ref4.children,\n      kind = _ref4.kind,\n      lowContrast = _ref4.lowContrast,\n      hideCloseButton = _ref4.hideCloseButton,\n      timeout = _ref4.timeout,\n      closeOnEscape = _ref4.closeOnEscape,\n      rest = _objectWithoutProperties(_ref4, _excluded3);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var containerClassName = cx(className, (_cx4 = {}, _defineProperty(_cx4, \"\".concat(prefix, \"--toast-notification\"), true), _defineProperty(_cx4, \"\".concat(prefix, \"--toast-notification--low-contrast\"), lowContrast), _defineProperty(_cx4, \"\".concat(prefix, \"--toast-notification--\").concat(kind), kind), _cx4));\n  var contentRef = useRef(null);\n  useNoInteractiveChildren(contentRef);\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  var ref = useRef(null);\n  useEscapeToClose(ref, handleCloseButtonClick, closeOnEscape);\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  var savedOnClose = useRef(onClose);\n  useEffect(function () {\n    savedOnClose.current = onClose;\n  });\n  useEffect(function () {\n    if (!timeout) {\n      return;\n    }\n\n    var timeoutId = window.setTimeout(function (event) {\n      setIsOpen(false);\n\n      if (savedOnClose.current) {\n        savedOnClose.current(event);\n      }\n    }, timeout);\n    return function () {\n      window.clearTimeout(timeoutId);\n    };\n  }, [timeout]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: \"toast\",\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: contentRef,\n    className: \"\".concat(prefix, \"--toast-notification__content\")\n  }, children), !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: \"toast\",\n    onClick: handleCloseButtonClick,\n    \"aria-hidden\": \"true\"\n  }));\n}\nToastNotification.propTypes = {\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if pressing the escape key should close notifications\n   */\n  closeOnEscape: PropTypes.bool,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the ToastNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.oneOf(['alert', 'log', 'status']).isRequired,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n\n  /**\n   * Specify an optional duration the notification should be closed in\n   */\n  timeout: PropTypes.number\n};\nToastNotification.defaultProps = {\n  kind: 'error',\n  children: 'provide content',\n  role: 'status',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false,\n  timeout: 0,\n  closeOnEscape: true\n};\nexport function InlineNotification(_ref5) {\n  var _cx5;\n\n  var children = _ref5.children,\n      role = _ref5.role,\n      onClose = _ref5.onClose,\n      onCloseButtonClick = _ref5.onCloseButtonClick,\n      iconDescription = _ref5.iconDescription,\n      statusIconDescription = _ref5.statusIconDescription,\n      className = _ref5.className,\n      kind = _ref5.kind,\n      lowContrast = _ref5.lowContrast,\n      hideCloseButton = _ref5.hideCloseButton,\n      closeOnEscape = _ref5.closeOnEscape,\n      rest = _objectWithoutProperties(_ref5, _excluded4);\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isOpen = _useState4[0],\n      setIsOpen = _useState4[1];\n\n  var containerClassName = cx(className, (_cx5 = {}, _defineProperty(_cx5, \"\".concat(prefix, \"--inline-notification\"), true), _defineProperty(_cx5, \"\".concat(prefix, \"--inline-notification--low-contrast\"), lowContrast), _defineProperty(_cx5, \"\".concat(prefix, \"--inline-notification--\").concat(kind), kind), _defineProperty(_cx5, \"\".concat(prefix, \"--inline-notification--hide-close-button\"), hideCloseButton), _cx5));\n  var contentRef = useRef(null);\n  useNoInteractiveChildren(contentRef);\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  var ref = useRef(null);\n  useEscapeToClose(ref, handleCloseButtonClick, closeOnEscape);\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-notification__details\")\n  }, /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: \"inline\",\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-notification__text-wrapper\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: contentRef,\n    className: \"\".concat(prefix, \"--inline-notification__content\")\n  }, children))), !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: \"inline\",\n    onClick: handleCloseButtonClick,\n    \"aria-hidden\": true\n  }));\n}\nInlineNotification.propTypes = {\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if pressing the escape key should close notifications\n   */\n  closeOnEscape: PropTypes.bool,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the InlineNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side. If the `actions` prop is\n   * configured, this will be overridden to \"alertdialog\".\n   */\n  role: PropTypes.oneOf(['alert', 'log', 'status']).isRequired,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string\n};\nInlineNotification.defaultProps = {\n  kind: 'error',\n  children: 'provide content',\n  role: 'status',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false,\n  closeOnEscape: true\n};\nexport function ActionableNotification(_ref6) {\n  var _cx6;\n\n  var actionButtonLabel = _ref6.actionButtonLabel,\n      children = _ref6.children,\n      role = _ref6.role,\n      onActionButtonClick = _ref6.onActionButtonClick,\n      onClose = _ref6.onClose,\n      onCloseButtonClick = _ref6.onCloseButtonClick,\n      iconDescription = _ref6.iconDescription,\n      statusIconDescription = _ref6.statusIconDescription,\n      className = _ref6.className,\n      inline = _ref6.inline,\n      kind = _ref6.kind,\n      lowContrast = _ref6.lowContrast,\n      hideCloseButton = _ref6.hideCloseButton,\n      hasFocus = _ref6.hasFocus,\n      closeOnEscape = _ref6.closeOnEscape,\n      rest = _objectWithoutProperties(_ref6, _excluded5);\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isOpen = _useState6[0],\n      setIsOpen = _useState6[1];\n\n  var containerClassName = cx(className, (_cx6 = {}, _defineProperty(_cx6, \"\".concat(prefix, \"--actionable-notification\"), true), _defineProperty(_cx6, \"\".concat(prefix, \"--actionable-notification--toast\"), !inline), _defineProperty(_cx6, \"\".concat(prefix, \"--actionable-notification--low-contrast\"), lowContrast), _defineProperty(_cx6, \"\".concat(prefix, \"--actionable-notification--\").concat(kind), kind), _defineProperty(_cx6, \"\".concat(prefix, \"--actionable-notification--hide-close-button\"), hideCloseButton), _cx6));\n  var ref = useRef(null);\n  useIsomorphicEffect(function () {\n    if (ref.current && hasFocus) {\n      ref.current.focus();\n    }\n  });\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  useEscapeToClose(ref, handleCloseButtonClick, closeOnEscape);\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    ref: ref,\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__details\")\n  }, /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: inline ? 'inline' : 'toast',\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__text-wrapper\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__content\")\n  }, children))), /*#__PURE__*/React.createElement(NotificationActionButton, {\n    onClick: onActionButtonClick,\n    inline: inline\n  }, actionButtonLabel), !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: \"actionable\",\n    onClick: handleCloseButtonClick,\n    \"aria-hidden\": true\n  }));\n}\nActionableNotification.propTypes = {\n  /**\n   * Pass in the action button label that will be rendered within the ActionableNotification.\n   */\n  actionButtonLabel: PropTypes.string.isRequired,\n\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if pressing the escape key should close notifications\n   */\n  closeOnEscape: PropTypes.bool,\n\n  /**\n   * Specify if focus should be moved to the component when the notification contains actions\n   */\n  hasFocus: PropTypes.bool,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /*\n   * Specify if the notification should have inline styling applied instead of toast\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the ActionableNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * Provide a function that is called when the action is clicked\n   */\n  onActionButtonClick: PropTypes.func,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alertdialog\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side.\n   */\n  role: PropTypes.string,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string\n};\nActionableNotification.defaultProps = {\n  kind: 'error',\n  children: 'provide content',\n  role: 'alertdialog',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false,\n  hasFocus: true,\n  closeOnEscape: true,\n  inline: false\n};","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/datacap-ui/node_modules/carbon-components-react/es/components/Notification/next/Notification.js"],"names":["_slicedToArray","_extends","_defineProperty","_objectWithoutProperties","_iconTypes","_excluded","_excluded2","_excluded3","_excluded4","_excluded5","PropTypes","React","useEffect","useRef","useState","cx","settings","Close20","ErrorFilled20","CheckmarkFilled20","WarningFilled20","WarningAltFilled20","InformationFilled20","InformationSquareFilled20","Button","useIsomorphicEffect","useNoInteractiveChildren","keys","matches","prefix","useEscapeToClose","ref","callback","override","arguments","length","undefined","handleKeyDown","event","elementContainsFocus","current","document","activeElement","contains","Escape","addEventListener","removeEventListener","NotificationActionButton","_ref","children","customClassName","className","onClick","inline","rest","concat","createElement","kind","size","propTypes","node","string","bool","func","NotificationButton","_ref2","ariaLabel","iconDescription","type","IconTag","renderIcon","name","notificationType","buttonClassName","iconClassName","title","oneOf","oneOfType","object","defaultProps","iconTypes","error","success","warning","NotificationIcon","_ref3","IconForKind","isRequired","ToastNotification","_ref4","_cx4","role","onClose","onCloseButtonClick","statusIconDescription","lowContrast","hideCloseButton","timeout","closeOnEscape","_useState","_useState2","isOpen","setIsOpen","containerClassName","contentRef","handleClose","evt","handleCloseButtonClick","savedOnClose","timeoutId","window","setTimeout","clearTimeout","number","InlineNotification","_ref5","_cx5","_useState3","_useState4","ActionableNotification","_ref6","_cx6","actionButtonLabel","onActionButtonClick","hasFocus","_useState5","_useState6","focus"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _iconTypes;\n\nvar _excluded = [\"children\", \"className\", \"onClick\", \"inline\"],\n    _excluded2 = [\"ariaLabel\", \"className\", \"iconDescription\", \"type\", \"renderIcon\", \"name\", \"notificationType\"],\n    _excluded3 = [\"role\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"children\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"timeout\", \"closeOnEscape\"],\n    _excluded4 = [\"children\", \"role\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"closeOnEscape\"],\n    _excluded5 = [\"actionButtonLabel\", \"children\", \"role\", \"onActionButtonClick\", \"onClose\", \"onCloseButtonClick\", \"iconDescription\", \"statusIconDescription\", \"className\", \"inline\", \"kind\", \"lowContrast\", \"hideCloseButton\", \"hasFocus\", \"closeOnEscape\"];\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport cx from 'classnames';\nimport { settings } from 'carbon-components';\nimport { Close20, ErrorFilled20, CheckmarkFilled20, WarningFilled20, WarningAltFilled20, InformationFilled20, InformationSquareFilled20 } from '@carbon/icons-react';\nimport Button from '../../Button';\nimport useIsomorphicEffect from '../../../internal/useIsomorphicEffect';\nimport { useNoInteractiveChildren } from '../../../internal/useNoInteractiveChildren';\nimport { keys, matches } from '../../../internal/keyboard';\nvar prefix = settings.prefix;\n/**\n * Conditionally call a callback when the escape key is pressed\n * @param {node} ref - ref of the container element to scope the functionality to\n * @param {func} callback - function to be called\n * @param {bool} override - escape hatch to conditionally call the callback\n */\n\nfunction useEscapeToClose(ref, callback) {\n  var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var handleKeyDown = function handleKeyDown(event) {\n    // The callback should only be called when focus is on or within the container\n    var elementContainsFocus = ref.current && document.activeElement === ref.current || ref.current.contains(document.activeElement);\n\n    if (matches(event, [keys.Escape]) && override && elementContainsFocus) {\n      callback(event);\n    }\n  };\n\n  useIsomorphicEffect(function () {\n    document.addEventListener('keydown', handleKeyDown, false);\n    return function () {\n      return document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n}\n\nexport function NotificationActionButton(_ref) {\n  var children = _ref.children,\n      customClassName = _ref.className,\n      onClick = _ref.onClick,\n      inline = _ref.inline,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var className = cx(customClassName, _defineProperty({}, \"\".concat(prefix, \"--actionable-notification__action-button\"), true));\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    className: className,\n    kind: inline ? 'ghost' : 'tertiary',\n    onClick: onClick,\n    size: \"sm\"\n  }, rest), children);\n}\nNotificationActionButton.propTypes = {\n  /**\n   * Specify the content of the notification action button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification action button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if the visual treatment of the button should be for an inline notification\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * Optionally specify a click handler for the notification action button.\n   */\n  onClick: PropTypes.func\n};\nexport function NotificationButton(_ref2) {\n  var ariaLabel = _ref2.ariaLabel,\n      className = _ref2.className,\n      iconDescription = _ref2.iconDescription,\n      type = _ref2.type,\n      IconTag = _ref2.renderIcon,\n      name = _ref2.name,\n      notificationType = _ref2.notificationType,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  var buttonClassName = cx(className, _defineProperty({}, \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-button\"), notificationType));\n  var iconClassName = cx(_defineProperty({}, \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-icon\"), notificationType));\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n    // eslint-disable-next-line react/button-has-type\n    type: type,\n    \"aria-label\": iconDescription,\n    title: iconDescription,\n    className: buttonClassName\n  }), IconTag && /*#__PURE__*/React.createElement(IconTag, {\n    \"aria-label\": ariaLabel,\n    className: iconClassName,\n    name: name\n  }));\n}\nNotificationButton.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the notification button\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Specify an optional className to be applied to the notification button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify an optional icon for the Button through a string,\n   * if something but regular \"close\" icon is desirable\n   */\n  name: PropTypes.string,\n\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline', 'actionable']),\n\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: PropTypes.string\n};\nNotificationButton.defaultProps = {\n  ariaLabel: 'close notification',\n  // TODO: deprecate this prop\n  notificationType: 'toast',\n  type: 'button',\n  iconDescription: 'close icon',\n  renderIcon: Close20\n};\nvar iconTypes = (_iconTypes = {\n  error: ErrorFilled20,\n  success: CheckmarkFilled20,\n  warning: WarningFilled20\n}, _defineProperty(_iconTypes, 'warning-alt', WarningAltFilled20), _defineProperty(_iconTypes, \"info\", InformationFilled20), _defineProperty(_iconTypes, 'info-square', InformationSquareFilled20), _iconTypes);\n\nfunction NotificationIcon(_ref3) {\n  var iconDescription = _ref3.iconDescription,\n      kind = _ref3.kind,\n      notificationType = _ref3.notificationType;\n  var IconForKind = iconTypes[kind];\n\n  if (!IconForKind) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(IconForKind, {\n    className: \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__icon\")\n  }, /*#__PURE__*/React.createElement(\"title\", null, iconDescription));\n}\n\nNotificationIcon.propTypes = {\n  iconDescription: PropTypes.string.isRequired,\n  kind: PropTypes.oneOf(['error', 'success', 'warning', 'warning-alt', 'info', 'info-square']).isRequired,\n  notificationType: PropTypes.oneOf(['inline', 'toast']).isRequired\n};\nexport function ToastNotification(_ref4) {\n  var _cx4;\n\n  var role = _ref4.role,\n      onClose = _ref4.onClose,\n      onCloseButtonClick = _ref4.onCloseButtonClick,\n      iconDescription = _ref4.iconDescription,\n      statusIconDescription = _ref4.statusIconDescription,\n      className = _ref4.className,\n      children = _ref4.children,\n      kind = _ref4.kind,\n      lowContrast = _ref4.lowContrast,\n      hideCloseButton = _ref4.hideCloseButton,\n      timeout = _ref4.timeout,\n      closeOnEscape = _ref4.closeOnEscape,\n      rest = _objectWithoutProperties(_ref4, _excluded3);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var containerClassName = cx(className, (_cx4 = {}, _defineProperty(_cx4, \"\".concat(prefix, \"--toast-notification\"), true), _defineProperty(_cx4, \"\".concat(prefix, \"--toast-notification--low-contrast\"), lowContrast), _defineProperty(_cx4, \"\".concat(prefix, \"--toast-notification--\").concat(kind), kind), _cx4));\n  var contentRef = useRef(null);\n  useNoInteractiveChildren(contentRef);\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  var ref = useRef(null);\n  useEscapeToClose(ref, handleCloseButtonClick, closeOnEscape);\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  var savedOnClose = useRef(onClose);\n  useEffect(function () {\n    savedOnClose.current = onClose;\n  });\n  useEffect(function () {\n    if (!timeout) {\n      return;\n    }\n\n    var timeoutId = window.setTimeout(function (event) {\n      setIsOpen(false);\n\n      if (savedOnClose.current) {\n        savedOnClose.current(event);\n      }\n    }, timeout);\n    return function () {\n      window.clearTimeout(timeoutId);\n    };\n  }, [timeout]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: \"toast\",\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: contentRef,\n    className: \"\".concat(prefix, \"--toast-notification__content\")\n  }, children), !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: \"toast\",\n    onClick: handleCloseButtonClick,\n    \"aria-hidden\": \"true\"\n  }));\n}\nToastNotification.propTypes = {\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if pressing the escape key should close notifications\n   */\n  closeOnEscape: PropTypes.bool,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the ToastNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.oneOf(['alert', 'log', 'status']).isRequired,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n\n  /**\n   * Specify an optional duration the notification should be closed in\n   */\n  timeout: PropTypes.number\n};\nToastNotification.defaultProps = {\n  kind: 'error',\n  children: 'provide content',\n  role: 'status',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false,\n  timeout: 0,\n  closeOnEscape: true\n};\nexport function InlineNotification(_ref5) {\n  var _cx5;\n\n  var children = _ref5.children,\n      role = _ref5.role,\n      onClose = _ref5.onClose,\n      onCloseButtonClick = _ref5.onCloseButtonClick,\n      iconDescription = _ref5.iconDescription,\n      statusIconDescription = _ref5.statusIconDescription,\n      className = _ref5.className,\n      kind = _ref5.kind,\n      lowContrast = _ref5.lowContrast,\n      hideCloseButton = _ref5.hideCloseButton,\n      closeOnEscape = _ref5.closeOnEscape,\n      rest = _objectWithoutProperties(_ref5, _excluded4);\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isOpen = _useState4[0],\n      setIsOpen = _useState4[1];\n\n  var containerClassName = cx(className, (_cx5 = {}, _defineProperty(_cx5, \"\".concat(prefix, \"--inline-notification\"), true), _defineProperty(_cx5, \"\".concat(prefix, \"--inline-notification--low-contrast\"), lowContrast), _defineProperty(_cx5, \"\".concat(prefix, \"--inline-notification--\").concat(kind), kind), _defineProperty(_cx5, \"\".concat(prefix, \"--inline-notification--hide-close-button\"), hideCloseButton), _cx5));\n  var contentRef = useRef(null);\n  useNoInteractiveChildren(contentRef);\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  var ref = useRef(null);\n  useEscapeToClose(ref, handleCloseButtonClick, closeOnEscape);\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-notification__details\")\n  }, /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: \"inline\",\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-notification__text-wrapper\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: contentRef,\n    className: \"\".concat(prefix, \"--inline-notification__content\")\n  }, children))), !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: \"inline\",\n    onClick: handleCloseButtonClick,\n    \"aria-hidden\": true\n  }));\n}\nInlineNotification.propTypes = {\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if pressing the escape key should close notifications\n   */\n  closeOnEscape: PropTypes.bool,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the InlineNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side. If the `actions` prop is\n   * configured, this will be overridden to \"alertdialog\".\n   */\n  role: PropTypes.oneOf(['alert', 'log', 'status']).isRequired,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string\n};\nInlineNotification.defaultProps = {\n  kind: 'error',\n  children: 'provide content',\n  role: 'status',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false,\n  closeOnEscape: true\n};\nexport function ActionableNotification(_ref6) {\n  var _cx6;\n\n  var actionButtonLabel = _ref6.actionButtonLabel,\n      children = _ref6.children,\n      role = _ref6.role,\n      onActionButtonClick = _ref6.onActionButtonClick,\n      onClose = _ref6.onClose,\n      onCloseButtonClick = _ref6.onCloseButtonClick,\n      iconDescription = _ref6.iconDescription,\n      statusIconDescription = _ref6.statusIconDescription,\n      className = _ref6.className,\n      inline = _ref6.inline,\n      kind = _ref6.kind,\n      lowContrast = _ref6.lowContrast,\n      hideCloseButton = _ref6.hideCloseButton,\n      hasFocus = _ref6.hasFocus,\n      closeOnEscape = _ref6.closeOnEscape,\n      rest = _objectWithoutProperties(_ref6, _excluded5);\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isOpen = _useState6[0],\n      setIsOpen = _useState6[1];\n\n  var containerClassName = cx(className, (_cx6 = {}, _defineProperty(_cx6, \"\".concat(prefix, \"--actionable-notification\"), true), _defineProperty(_cx6, \"\".concat(prefix, \"--actionable-notification--toast\"), !inline), _defineProperty(_cx6, \"\".concat(prefix, \"--actionable-notification--low-contrast\"), lowContrast), _defineProperty(_cx6, \"\".concat(prefix, \"--actionable-notification--\").concat(kind), kind), _defineProperty(_cx6, \"\".concat(prefix, \"--actionable-notification--hide-close-button\"), hideCloseButton), _cx6));\n  var ref = useRef(null);\n  useIsomorphicEffect(function () {\n    if (ref.current && hasFocus) {\n      ref.current.focus();\n    }\n  });\n\n  var handleClose = function handleClose(evt) {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n\n  useEscapeToClose(ref, handleCloseButtonClick, closeOnEscape);\n\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, rest, {\n    ref: ref,\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__details\")\n  }, /*#__PURE__*/React.createElement(NotificationIcon, {\n    notificationType: inline ? 'inline' : 'toast',\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__text-wrapper\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__content\")\n  }, children))), /*#__PURE__*/React.createElement(NotificationActionButton, {\n    onClick: onActionButtonClick,\n    inline: inline\n  }, actionButtonLabel), !hideCloseButton && /*#__PURE__*/React.createElement(NotificationButton, {\n    iconDescription: iconDescription,\n    notificationType: \"actionable\",\n    onClick: handleCloseButtonClick,\n    \"aria-hidden\": true\n  }));\n}\nActionableNotification.propTypes = {\n  /**\n   * Pass in the action button label that will be rendered within the ActionableNotification.\n   */\n  actionButtonLabel: PropTypes.string.isRequired,\n\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if pressing the escape key should close notifications\n   */\n  closeOnEscape: PropTypes.bool,\n\n  /**\n   * Specify if focus should be moved to the component when the notification contains actions\n   */\n  hasFocus: PropTypes.bool,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /*\n   * Specify if the notification should have inline styling applied instead of toast\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired,\n\n  /**\n   * Specify whether you are using the low contrast variant of the ActionableNotification.\n   */\n  lowContrast: PropTypes.bool,\n\n  /**\n   * Provide a function that is called when the action is clicked\n   */\n  onActionButtonClick: PropTypes.func,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * By default, this value is \"alertdialog\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side.\n   */\n  role: PropTypes.string,\n\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string\n};\nActionableNotification.defaultProps = {\n  kind: 'error',\n  children: 'provide content',\n  role: 'alertdialog',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false,\n  hasFocus: true,\n  closeOnEscape: true,\n  inline: false\n};"]},"metadata":{},"sourceType":"module"}
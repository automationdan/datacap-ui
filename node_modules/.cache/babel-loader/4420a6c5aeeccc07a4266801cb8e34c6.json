{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n/**\n * Copyright IBM Corp. 2015, 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { FeatureFlags as GlobalFeatureFlags, createScope } from '@carbon/feature-flags';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\n/**\n * Our FeatureFlagContext is used alongside the FeatureFlags component to enable\n * or disable feature flags in a given React tree\n */\n\nvar FeatureFlagContext = /*#__PURE__*/createContext(GlobalFeatureFlags);\n/**\n * Supports an object of feature flag values with the `flags` prop, merging them\n * along with the current `FeatureFlagContext` to provide consumers to check if\n * a feature flag is enabled or disabled in a given React tree\n */\n\nfunction FeatureFlags(_ref) {\n  var children = _ref.children,\n      _ref$flags = _ref.flags,\n      flags = _ref$flags === void 0 ? {} : _ref$flags;\n  var parentScope = useContext(FeatureFlagContext);\n\n  var _useState = useState(parentScope),\n      _useState2 = _slicedToArray(_useState, 2),\n      prevParentScope = _useState2[0],\n      setPrevParentScope = _useState2[1];\n\n  var _useState3 = useState(function () {\n    var scope = createScope(flags);\n    scope.mergeWithScope(parentScope);\n    return scope;\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scope = _useState4[0],\n      updateScope = _useState4[1];\n\n  if (parentScope !== prevParentScope) {\n    var _scope = createScope(flags);\n\n    _scope.mergeWithScope(parentScope);\n\n    updateScope(_scope);\n    setPrevParentScope(parentScope);\n  } // We use a custom hook to detect if any of the keys or their values change\n  // for flags that are passed in. If they have changed, then we re-create the\n  // FeatureFlagScope using the new flags\n\n\n  useChangedValue(flags, isEqual, function (changedFlags) {\n    var scope = createScope(changedFlags);\n    scope.mergeWithScope(parentScope);\n    updateScope(scope);\n  });\n  return /*#__PURE__*/React.createElement(FeatureFlagContext.Provider, {\n    value: scope\n  }, children);\n}\n\nFeatureFlags.propTypes = {\n  children: PropTypes.node,\n\n  /**\n   * Provide the feature flags to enabled or disabled in the current React tree\n   */\n  flags: PropTypes.objectOf(PropTypes.bool)\n};\n/**\n * This hook will store previous versions of the given `value` and compare the\n * current value to the previous one using the `compare` function. If the\n * compare function returns true, then the given `callback` is invoked in an\n * effect.\n *\n * @param {any} value\n * @param {Function} compare\n * @param {Function} callback\n */\n\nfunction useChangedValue(value, compare, callback) {\n  var initialRender = useRef(false);\n  var savedCallback = useRef(callback);\n\n  var _useState5 = useState(value),\n      _useState6 = _slicedToArray(_useState5, 2),\n      prevValue = _useState6[0],\n      setPrevValue = _useState6[1];\n\n  if (!compare(prevValue, value)) {\n    setPrevValue(value);\n  }\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  useEffect(function () {\n    // We only want the callback triggered after the first render\n    if (initialRender.current) {\n      savedCallback.current(prevValue);\n    }\n  }, [prevValue]);\n  useEffect(function () {\n    initialRender.current = true;\n  }, []);\n}\n/**\n * Access whether a given flag is enabled or disabled in a given\n * FeatureFlagContext\n *\n * @returns {boolean}\n */\n\n\nfunction useFeatureFlag(flag) {\n  var scope = useContext(FeatureFlagContext);\n  return scope.enabled(flag);\n}\n/**\n * Access all feature flag information for the given FeatureFlagContext\n *\n * @returns {FeatureFlagScope}\n */\n\n\nfunction useFeatureFlags() {\n  return useContext(FeatureFlagContext);\n}\n/**\n * Compare two objects and determine if they are equal. This is a shallow\n * comparison since the objects we are comparing are objects with boolean flags\n * from the flags prop in the `FeatureFlags` component\n *\n * @param {object} a\n * @param {object} b\n * @returns {boolean}\n */\n\n\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  for (var _i = 0, _Object$keys = Object.keys(a); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  for (var _i2 = 0, _Object$keys2 = Object.keys(b); _i2 < _Object$keys2.length; _i2++) {\n    var _key = _Object$keys2[_i2];\n\n    if (b[_key] !== a[_key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport { FeatureFlags, FeatureFlagContext, useFeatureFlags, useFeatureFlag };","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/node_modules/carbon-components-react/es/components/FeatureFlags/index.js"],"names":["_slicedToArray","FeatureFlags","GlobalFeatureFlags","createScope","PropTypes","React","createContext","useContext","useEffect","useRef","useState","FeatureFlagContext","_ref","children","_ref$flags","flags","parentScope","_useState","_useState2","prevParentScope","setPrevParentScope","_useState3","scope","mergeWithScope","_useState4","updateScope","_scope","useChangedValue","isEqual","changedFlags","createElement","Provider","value","propTypes","node","objectOf","bool","compare","callback","initialRender","savedCallback","_useState5","_useState6","prevValue","setPrevValue","current","useFeatureFlag","flag","enabled","useFeatureFlags","a","b","_i","_Object$keys","Object","keys","length","key","_i2","_Object$keys2","_key"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/**\n * Copyright IBM Corp. 2015, 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { FeatureFlags as GlobalFeatureFlags, createScope } from '@carbon/feature-flags';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\n/**\n * Our FeatureFlagContext is used alongside the FeatureFlags component to enable\n * or disable feature flags in a given React tree\n */\n\nvar FeatureFlagContext = /*#__PURE__*/createContext(GlobalFeatureFlags);\n/**\n * Supports an object of feature flag values with the `flags` prop, merging them\n * along with the current `FeatureFlagContext` to provide consumers to check if\n * a feature flag is enabled or disabled in a given React tree\n */\n\nfunction FeatureFlags(_ref) {\n  var children = _ref.children,\n      _ref$flags = _ref.flags,\n      flags = _ref$flags === void 0 ? {} : _ref$flags;\n  var parentScope = useContext(FeatureFlagContext);\n\n  var _useState = useState(parentScope),\n      _useState2 = _slicedToArray(_useState, 2),\n      prevParentScope = _useState2[0],\n      setPrevParentScope = _useState2[1];\n\n  var _useState3 = useState(function () {\n    var scope = createScope(flags);\n    scope.mergeWithScope(parentScope);\n    return scope;\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scope = _useState4[0],\n      updateScope = _useState4[1];\n\n  if (parentScope !== prevParentScope) {\n    var _scope = createScope(flags);\n\n    _scope.mergeWithScope(parentScope);\n\n    updateScope(_scope);\n    setPrevParentScope(parentScope);\n  } // We use a custom hook to detect if any of the keys or their values change\n  // for flags that are passed in. If they have changed, then we re-create the\n  // FeatureFlagScope using the new flags\n\n\n  useChangedValue(flags, isEqual, function (changedFlags) {\n    var scope = createScope(changedFlags);\n    scope.mergeWithScope(parentScope);\n    updateScope(scope);\n  });\n  return /*#__PURE__*/React.createElement(FeatureFlagContext.Provider, {\n    value: scope\n  }, children);\n}\n\nFeatureFlags.propTypes = {\n  children: PropTypes.node,\n\n  /**\n   * Provide the feature flags to enabled or disabled in the current React tree\n   */\n  flags: PropTypes.objectOf(PropTypes.bool)\n};\n/**\n * This hook will store previous versions of the given `value` and compare the\n * current value to the previous one using the `compare` function. If the\n * compare function returns true, then the given `callback` is invoked in an\n * effect.\n *\n * @param {any} value\n * @param {Function} compare\n * @param {Function} callback\n */\n\nfunction useChangedValue(value, compare, callback) {\n  var initialRender = useRef(false);\n  var savedCallback = useRef(callback);\n\n  var _useState5 = useState(value),\n      _useState6 = _slicedToArray(_useState5, 2),\n      prevValue = _useState6[0],\n      setPrevValue = _useState6[1];\n\n  if (!compare(prevValue, value)) {\n    setPrevValue(value);\n  }\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  useEffect(function () {\n    // We only want the callback triggered after the first render\n    if (initialRender.current) {\n      savedCallback.current(prevValue);\n    }\n  }, [prevValue]);\n  useEffect(function () {\n    initialRender.current = true;\n  }, []);\n}\n/**\n * Access whether a given flag is enabled or disabled in a given\n * FeatureFlagContext\n *\n * @returns {boolean}\n */\n\n\nfunction useFeatureFlag(flag) {\n  var scope = useContext(FeatureFlagContext);\n  return scope.enabled(flag);\n}\n/**\n * Access all feature flag information for the given FeatureFlagContext\n *\n * @returns {FeatureFlagScope}\n */\n\n\nfunction useFeatureFlags() {\n  return useContext(FeatureFlagContext);\n}\n/**\n * Compare two objects and determine if they are equal. This is a shallow\n * comparison since the objects we are comparing are objects with boolean flags\n * from the flags prop in the `FeatureFlags` component\n *\n * @param {object} a\n * @param {object} b\n * @returns {boolean}\n */\n\n\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  for (var _i = 0, _Object$keys = Object.keys(a); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  for (var _i2 = 0, _Object$keys2 = Object.keys(b); _i2 < _Object$keys2.length; _i2++) {\n    var _key = _Object$keys2[_i2];\n\n    if (b[_key] !== a[_key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport { FeatureFlags, FeatureFlagContext, useFeatureFlags, useFeatureFlag };"]},"metadata":{},"sourceType":"module"}
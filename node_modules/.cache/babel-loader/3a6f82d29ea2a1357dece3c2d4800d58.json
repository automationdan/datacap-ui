{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\"];\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useFeatureFlag } from '../FeatureFlags';\nimport { usePrefix } from '../../internal/usePrefix';\n\nfunction Column(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      children = _ref.children,\n      containerClassName = _ref.className,\n      sm = _ref.sm,\n      md = _ref.md,\n      lg = _ref.lg,\n      xlg = _ref.xlg,\n      max = _ref.max,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  var hasCSSGrid = useFeatureFlag('enable-css-grid');\n  var columnClassName = hasCSSGrid ? getClassNameForBreakpoints([sm, md, lg, xlg, max], prefix) : getClassNameForFlexGridBreakpoints([sm, md, lg, xlg, max], prefix);\n  var className = cx(containerClassName, columnClassName, _defineProperty({}, \"\".concat(prefix, \"--col\"), columnClassName.length === 0));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nvar spanPropType = PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.number,\n  offset: PropTypes.number\n})]);\nColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\nvar breakpointNames = ['sm', 'md', 'lg', 'xlg', 'max'];\n/**\n * @typedef {object} Breakpoint\n * @property {boolean|number} [span]\n * @property {number} [offset]\n */\n\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\nfunction getClassNameForBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-auto\"));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof offset === 'number' && offset > 0) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(offset + 1));\n    }\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span));\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-auto\"));\n    }\n  }\n\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\n\nfunction getClassNameForFlexGridBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(span));\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n    }\n\n    if (typeof offset === 'number') {\n      classNames.push(\"\".concat(prefix, \"--offset-\").concat(name, \"-\").concat(offset));\n    }\n  }\n\n  return classNames.join(' ');\n}\n\nexport default Column;","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/node_modules/carbon-components-react/es/components/Grid/Column.js"],"names":["_extends","_defineProperty","_objectWithoutProperties","_excluded","cx","PropTypes","React","useFeatureFlag","usePrefix","Column","_ref","_ref$as","as","BaseComponent","children","containerClassName","className","sm","md","lg","xlg","max","rest","prefix","hasCSSGrid","columnClassName","getClassNameForBreakpoints","getClassNameForFlexGridBreakpoints","concat","length","createElement","spanPropType","oneOfType","bool","number","shape","span","offset","propTypes","string","elementType","node","breakpointNames","breakpoints","classNames","i","breakpoint","undefined","name","push","join"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\"];\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useFeatureFlag } from '../FeatureFlags';\nimport { usePrefix } from '../../internal/usePrefix';\n\nfunction Column(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      children = _ref.children,\n      containerClassName = _ref.className,\n      sm = _ref.sm,\n      md = _ref.md,\n      lg = _ref.lg,\n      xlg = _ref.xlg,\n      max = _ref.max,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  var hasCSSGrid = useFeatureFlag('enable-css-grid');\n  var columnClassName = hasCSSGrid ? getClassNameForBreakpoints([sm, md, lg, xlg, max], prefix) : getClassNameForFlexGridBreakpoints([sm, md, lg, xlg, max], prefix);\n  var className = cx(containerClassName, columnClassName, _defineProperty({}, \"\".concat(prefix, \"--col\"), columnClassName.length === 0));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nvar spanPropType = PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.number,\n  offset: PropTypes.number\n})]);\nColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\nvar breakpointNames = ['sm', 'md', 'lg', 'xlg', 'max'];\n/**\n * @typedef {object} Breakpoint\n * @property {boolean|number} [span]\n * @property {number} [offset]\n */\n\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\nfunction getClassNameForBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-auto\"));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof offset === 'number' && offset > 0) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(offset + 1));\n    }\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span));\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-auto\"));\n    }\n  }\n\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\n\nfunction getClassNameForFlexGridBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(span));\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n    }\n\n    if (typeof offset === 'number') {\n      classNames.push(\"\".concat(prefix, \"--offset-\").concat(name, \"-\").concat(offset));\n    }\n  }\n\n  return classNames.join(' ');\n}\n\nexport default Column;"]},"metadata":{},"sourceType":"module"}
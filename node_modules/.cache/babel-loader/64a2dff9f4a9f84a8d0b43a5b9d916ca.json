{"ast":null,"code":"var _jsxFileName = \"/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/src/components/upload-files.component.js\";\nimport React, { Component } from \"react\";\nimport UploadService from \"../services/upload-files.service\";\nimport DocViewer from \"react-doc-viewer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UploadFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFile = this.selectFile.bind(this);\n    this.upload = this.upload.bind(this);\n    this.state = {\n      selectedFiles: undefined,\n      currentFile: undefined,\n      progress: 0,\n      message: [],\n      docUrls: [{\n        fileData: 'http://localhost:3000/api/documentunderstanding/getdoc/fa7e4cc0-b283-4e4d-b79d-39736930aa72/pdf'\n      }],\n      fileInfos: []\n    };\n  }\n\n  selectFile(event) {\n    this.setState({\n      selectedFiles: event.target.files\n    });\n  }\n\n  upload() {\n    let currentFile = this.state.selectedFiles[0];\n    this.setState({\n      progress: 0,\n      currentFile: currentFile\n    });\n    UploadService.upload(currentFile, event => {\n      this.setState({\n        progress: Math.round(100 * event.loaded / event.total)\n      });\n    }).then(response => {\n      console.log(response.data.transactionalId);\n      UploadService.executeRules(response.data.transactionalId, event => {\n        this.setState({\n          progress: Math.round(100 * event.loaded / event.total)\n        });\n      }).then(response => {\n        console.log(response.data);\n        this.setState({\n          docUrls: [{\n            uri: \"/api/documentunderstanding/getdoc/\" + response.data.transactionalId + \"/pdf\"\n          }],\n          message: response.data.values,\n          transactionId: response.data.transactionalId\n        });\n        return \"stuff\";\n      });\n    }).then(files => {\n      this.setState({\n        fileInfos: files.data\n      });\n    }).catch(() => {\n      this.setState({\n        progress: 0,\n        message: \"Could not upload the file!\",\n        currentFile: undefined\n      });\n    });\n    this.setState({\n      selectedFiles: undefined\n    });\n  }\n\n  render() {\n    const {\n      selectedFiles,\n      currentFile,\n      progress,\n      message,\n      fileInfos\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"btn btn-default\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: this.selectFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        disabled: !selectedFiles,\n        onClick: this.upload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.message.map(d => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [d.fieldName, \" : \", d.fieldValue]\n        }, d.fieldName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 41\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.transactionId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DocViewer, {\n        documents: this.state.docUrls\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/capture/capture-ui/src/components/upload-files.component.js"],"names":["React","Component","UploadService","DocViewer","UploadFiles","constructor","props","selectFile","bind","upload","state","selectedFiles","undefined","currentFile","progress","message","docUrls","fileData","fileInfos","event","setState","target","files","Math","round","loaded","total","then","response","console","log","data","transactionalId","executeRules","uri","values","transactionId","catch","render","map","d","fieldName","fieldValue"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport UploadService from \"../services/upload-files.service\";\nimport DocViewer from \"react-doc-viewer\";\n\nexport default class UploadFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFile = this.selectFile.bind(this);\n    this.upload = this.upload.bind(this);\n\n    this.state = {\n      selectedFiles: undefined,\n      currentFile: undefined,\n      progress: 0,\n      message: [],\n      docUrls: [ { fileData: 'http://localhost:3000/api/documentunderstanding/getdoc/fa7e4cc0-b283-4e4d-b79d-39736930aa72/pdf' } ],\n      fileInfos: [],\n    };\n  }\n\n  selectFile(event) {\n    this.setState({\n      selectedFiles: event.target.files,\n    });\n  }\n\n  upload() {\n    let currentFile = this.state.selectedFiles[0];\n\n    this.setState({\n      progress: 0,\n      currentFile: currentFile,\n    });\n\n    UploadService.upload(currentFile, (event) => {\n      this.setState({\n        progress: Math.round((100 * event.loaded) / event.total),\n      });\n    })\n      .then((response) => {\n        console.log(response.data.transactionalId);\n        UploadService.executeRules(response.data.transactionalId,(event) =>{\n          this.setState({\n            progress: Math.round((100 * event.loaded) / event.total),\n          });\n        }).then((response)=>{\n          console.log(response.data)\n          this.setState({\n            docUrls: [{uri: \"/api/documentunderstanding/getdoc/\" + response.data.transactionalId+ \"/pdf\"}],\n            message: response.data.values,\n            transactionId: response.data.transactionalId\n          });\n          return \"stuff\"\n        })\n\n      })\n      .then((files) => {\n        this.setState({\n          fileInfos: files.data,\n        });\n      })\n      .catch(() => {\n        this.setState({\n          progress: 0,\n          message: \"Could not upload the file!\",\n          currentFile: undefined,\n        });\n      });\n\n    this.setState({\n      selectedFiles: undefined,\n    });\n  }\n\n  render() {\n    const {\n      selectedFiles,\n      currentFile,\n      progress,\n      message,\n      fileInfos,\n    } = this.state;\n\n    return (\n      <div>\n\n        <label className=\"btn btn-default\">\n          <input type=\"file\" onChange={this.selectFile} />\n        </label>\n\n        <button\n          className=\"btn btn-success\"\n          disabled={!selectedFiles}\n          onClick={this.upload}\n        >\n          Upload\n        </button>\n\n\n        <ul>\n          {this.state.message.map(d => (<li key={d.fieldName}>{d.fieldName} : {d.fieldValue}</li>))}\n          </ul>\n          <h1>{this.state.transactionId}</h1>\n          <DocViewer documents={this.state.docUrls} />\n\n\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
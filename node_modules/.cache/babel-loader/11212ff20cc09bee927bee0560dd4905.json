{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _defaultTranslations;\n\nvar _excluded = [\"clearSelection\", \"selectionCount\", \"translateWithId\", \"disabled\", \"onClearSelection\"];\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Close16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport { match, keys } from '../../../internal/keyboard';\nvar prefix = settings.prefix;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\n\nfunction ListBoxSelection(_ref) {\n  var _cx;\n\n  var clearSelection = _ref.clearSelection,\n      selectionCount = _ref.selectionCount,\n      t = _ref.translateWithId,\n      disabled = _ref.disabled,\n      onClearSelection = _ref.onClearSelection,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var className = cx(\"\".concat(prefix, \"--list-box__selection\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--tag--filter\"), selectionCount), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection--multi\"), selectionCount), _cx));\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  var tagClasses = cx(\"\".concat(prefix, \"--tag\"), \"\".concat(prefix, \"--tag--filter\"), \"\".concat(prefix, \"--tag--high-contrast\"), _defineProperty({}, \"\".concat(prefix, \"--tag--disabled\"), disabled));\n\n  function onClick(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    }\n\n    clearSelection(event);\n\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  }\n\n  function onKeyDown(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    } // When a user hits ENTER, we'll clear the selection\n\n\n    if (match(event, keys.Enter)) {\n      clearSelection(event);\n\n      if (onClearSelection) {\n        onClearSelection(event);\n      }\n    }\n  }\n\n  if (selectionCount) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: tagClasses\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefix, \"--tag__label\"),\n      title: selectionCount\n    }, selectionCount), /*#__PURE__*/React.createElement(\"button\", {\n      \"aria-label\": description,\n      className: \"\".concat(prefix, \"--tag__close-icon\"),\n      disabled: disabled,\n      onClick: onClick,\n      onKeyDown: onKeyDown,\n      tabIndex: disabled ? -1 : 0,\n      title: description,\n      type: \"button\"\n    }, /*#__PURE__*/React.createElement(Close16, null)));\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n    \"aria-label\": description,\n    className: className,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    tabIndex: disabled ? -1 : 0,\n    title: description,\n    type: \"button\"\n  }), /*#__PURE__*/React.createElement(Close16, null));\n}\n\nexport var translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: PropTypes.func,\n\n  /**\n   * Specify an optional `onClick` handler that is called when the underlying\n   * clear selection element is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify an optional `onKeyDown` handler that is called when the underlying\n   * clear selection element fires a keydown event\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxSelection;","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/datacap-ui/node_modules/carbon-components-react/es/components/ListBox/next/ListBoxSelection.js"],"names":["_extends","_defineProperty","_objectWithoutProperties","_defaultTranslations","_excluded","cx","React","PropTypes","Close16","settings","match","keys","prefix","ListBoxSelection","_ref","_cx","clearSelection","selectionCount","t","translateWithId","disabled","onClearSelection","rest","className","concat","description","tagClasses","onClick","event","stopPropagation","onKeyDown","Enter","createElement","title","tabIndex","type","translationIds","defaultTranslations","propTypes","func","isRequired","bool","number","defaultProps","id"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _defaultTranslations;\n\nvar _excluded = [\"clearSelection\", \"selectionCount\", \"translateWithId\", \"disabled\", \"onClearSelection\"];\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Close16 } from '@carbon/icons-react';\nimport { settings } from 'carbon-components';\nimport { match, keys } from '../../../internal/keyboard';\nvar prefix = settings.prefix;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\n\nfunction ListBoxSelection(_ref) {\n  var _cx;\n\n  var clearSelection = _ref.clearSelection,\n      selectionCount = _ref.selectionCount,\n      t = _ref.translateWithId,\n      disabled = _ref.disabled,\n      onClearSelection = _ref.onClearSelection,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var className = cx(\"\".concat(prefix, \"--list-box__selection\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--tag--filter\"), selectionCount), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection--multi\"), selectionCount), _cx));\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  var tagClasses = cx(\"\".concat(prefix, \"--tag\"), \"\".concat(prefix, \"--tag--filter\"), \"\".concat(prefix, \"--tag--high-contrast\"), _defineProperty({}, \"\".concat(prefix, \"--tag--disabled\"), disabled));\n\n  function onClick(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    }\n\n    clearSelection(event);\n\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  }\n\n  function onKeyDown(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    } // When a user hits ENTER, we'll clear the selection\n\n\n    if (match(event, keys.Enter)) {\n      clearSelection(event);\n\n      if (onClearSelection) {\n        onClearSelection(event);\n      }\n    }\n  }\n\n  if (selectionCount) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: tagClasses\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefix, \"--tag__label\"),\n      title: selectionCount\n    }, selectionCount), /*#__PURE__*/React.createElement(\"button\", {\n      \"aria-label\": description,\n      className: \"\".concat(prefix, \"--tag__close-icon\"),\n      disabled: disabled,\n      onClick: onClick,\n      onKeyDown: onKeyDown,\n      tabIndex: disabled ? -1 : 0,\n      title: description,\n      type: \"button\"\n    }, /*#__PURE__*/React.createElement(Close16, null)));\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n    \"aria-label\": description,\n    className: className,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    tabIndex: disabled ? -1 : 0,\n    title: description,\n    type: \"button\"\n  }), /*#__PURE__*/React.createElement(Close16, null));\n}\n\nexport var translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: PropTypes.func,\n\n  /**\n   * Specify an optional `onClick` handler that is called when the underlying\n   * clear selection element is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify an optional `onKeyDown` handler that is called when the underlying\n   * clear selection element fires a keydown event\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxSelection;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\", \"className\", \"children\", \"ratio\"];\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { usePrefix } from '../../internal/usePrefix';\n/**\n * The AspectRatio component provides a `ratio` prop that will be used to\n * specify the aspect ratio that the children you provide will be displayed in.\n * This is often useful alongside our grid components, or for media assets like\n * images or videos.\n */\n\nfunction AspectRatio(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      containerClassName = _ref.className,\n      children = _ref.children,\n      _ref$ratio = _ref.ratio,\n      ratio = _ref$ratio === void 0 ? '1x1' : _ref$ratio,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  var className = cx(containerClassName, \"\".concat(prefix, \"--aspect-ratio\"), \"\".concat(prefix, \"--aspect-ratio--\").concat(ratio));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nAspectRatio.propTypes = {\n  /**\n   * Provide a custom component or string to be rendered as the outermost node\n   * of the component. This is useful if you want to deviate from the default\n   * `div` tag, where you could specify `section` or `article` instead.\n   *\n   * ```jsx\n   * <AspectRatio as=\"article\">My content</AspectRatio>\n   * ```\n   */\n  as: PropTypes.elementType,\n\n  /**\n   * Specify the content that will be placed in the aspect ratio\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a class name for the outermost node of the component\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the ratio to be used by the aspect ratio container. This will\n   * determine what aspect ratio your content will be displayed in.\n   */\n  ratio: PropTypes.oneOf(['16x9', '9x16', '2x1', '1x2', '4x3', '3x4', '1x1'])\n};\nexport default AspectRatio;","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/datacap-ui/node_modules/carbon-components-react/es/components/AspectRatio/AspectRatio.js"],"names":["_extends","_objectWithoutProperties","_excluded","cx","PropTypes","React","usePrefix","AspectRatio","_ref","_ref$as","as","BaseComponent","containerClassName","className","children","_ref$ratio","ratio","rest","prefix","concat","createElement","propTypes","elementType","node","string","oneOf"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,wBAAP,MAAqC,gDAArC;AACA,IAAIC,SAAS,GAAG,CAAC,IAAD,EAAO,WAAP,EAAoB,UAApB,EAAgC,OAAhC,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAIC,OAAO,GAAGD,IAAI,CAACE,EAAnB;AAAA,MACIC,aAAa,GAAGF,OAAO,KAAK,KAAK,CAAjB,GAAqB,KAArB,GAA6BA,OADjD;AAAA,MAEIG,kBAAkB,GAAGJ,IAAI,CAACK,SAF9B;AAAA,MAGIC,QAAQ,GAAGN,IAAI,CAACM,QAHpB;AAAA,MAIIC,UAAU,GAAGP,IAAI,CAACQ,KAJtB;AAAA,MAKIA,KAAK,GAAGD,UAAU,KAAK,KAAK,CAApB,GAAwB,KAAxB,GAAgCA,UAL5C;AAAA,MAMIE,IAAI,GAAGhB,wBAAwB,CAACO,IAAD,EAAON,SAAP,CANnC;;AAQA,MAAIgB,MAAM,GAAGZ,SAAS,EAAtB;AACA,MAAIO,SAAS,GAAGV,EAAE,CAACS,kBAAD,EAAqB,GAAGO,MAAH,CAAUD,MAAV,EAAkB,gBAAlB,CAArB,EAA0D,GAAGC,MAAH,CAAUD,MAAV,EAAkB,kBAAlB,EAAsCC,MAAtC,CAA6CH,KAA7C,CAA1D,CAAlB;AACA,SAAO,aAAaX,KAAK,CAACe,aAAN,CAAoBT,aAApB,EAAmCX,QAAQ,CAAC;AAC9Da,IAAAA,SAAS,EAAEA;AADmD,GAAD,EAE5DI,IAF4D,CAA3C,EAEVH,QAFU,CAApB;AAGD;;AAEDP,WAAW,CAACc,SAAZ,GAAwB;AACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEX,EAAAA,EAAE,EAAEN,SAAS,CAACkB,WAVQ;;AAYtB;AACF;AACA;AACER,EAAAA,QAAQ,EAAEV,SAAS,CAACmB,IAfE;;AAiBtB;AACF;AACA;AACEV,EAAAA,SAAS,EAAET,SAAS,CAACoB,MApBC;;AAsBtB;AACF;AACA;AACA;AACER,EAAAA,KAAK,EAAEZ,SAAS,CAACqB,KAAV,CAAgB,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,EAAwB,KAAxB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,KAA7C,CAAhB;AA1Be,CAAxB;AA4BA,eAAelB,WAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\", \"className\", \"children\", \"ratio\"];\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { usePrefix } from '../../internal/usePrefix';\n/**\n * The AspectRatio component provides a `ratio` prop that will be used to\n * specify the aspect ratio that the children you provide will be displayed in.\n * This is often useful alongside our grid components, or for media assets like\n * images or videos.\n */\n\nfunction AspectRatio(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      containerClassName = _ref.className,\n      children = _ref.children,\n      _ref$ratio = _ref.ratio,\n      ratio = _ref$ratio === void 0 ? '1x1' : _ref$ratio,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  var className = cx(containerClassName, \"\".concat(prefix, \"--aspect-ratio\"), \"\".concat(prefix, \"--aspect-ratio--\").concat(ratio));\n  return /*#__PURE__*/React.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nAspectRatio.propTypes = {\n  /**\n   * Provide a custom component or string to be rendered as the outermost node\n   * of the component. This is useful if you want to deviate from the default\n   * `div` tag, where you could specify `section` or `article` instead.\n   *\n   * ```jsx\n   * <AspectRatio as=\"article\">My content</AspectRatio>\n   * ```\n   */\n  as: PropTypes.elementType,\n\n  /**\n   * Specify the content that will be placed in the aspect ratio\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a class name for the outermost node of the component\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the ratio to be used by the aspect ratio container. This will\n   * determine what aspect ratio your content will be displayed in.\n   */\n  ratio: PropTypes.oneOf(['16x9', '9x16', '2x1', '1x2', '4x3', '3x4', '1x1'])\n};\nexport default AspectRatio;"]},"metadata":{},"sourceType":"module"}
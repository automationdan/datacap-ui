{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { Text } from './Text';\n/**\n * Create a text component wrapper for a given text node type. Useful for\n * returning a `Text` component for a text node like a `<label>`.\n * @param {string} element\n * @param {string} displayName\n */\n\nexport function createTextComponent(element, displayName) {\n  function TextWrapper(props) {\n    return /*#__PURE__*/React.createElement(Text, _extends({\n      as: element\n    }, props));\n  }\n\n  if (process.env.NODE_ENV !== \"production\") {\n    TextWrapper.displayName = displayName;\n  }\n\n  return TextWrapper;\n}","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/datacap-ui/node_modules/carbon-components-react/es/components/Text/createTextComponent.js"],"names":["_extends","React","Text","createTextComponent","element","displayName","TextWrapper","props","createElement","as","process","env","NODE_ENV"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,WAAtC,EAAmD;AACxD,WAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,WAAO,aAAaN,KAAK,CAACO,aAAN,CAAoBN,IAApB,EAA0BF,QAAQ,CAAC;AACrDS,MAAAA,EAAE,EAAEL;AADiD,KAAD,EAEnDG,KAFmD,CAAlC,CAApB;AAGD;;AAED,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCN,IAAAA,WAAW,CAACD,WAAZ,GAA0BA,WAA1B;AACD;;AAED,SAAOC,WAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { Text } from './Text';\n/**\n * Create a text component wrapper for a given text node type. Useful for\n * returning a `Text` component for a text node like a `<label>`.\n * @param {string} element\n * @param {string} displayName\n */\n\nexport function createTextComponent(element, displayName) {\n  function TextWrapper(props) {\n    return /*#__PURE__*/React.createElement(Text, _extends({\n      as: element\n    }, props));\n  }\n\n  if (process.env.NODE_ENV !== \"production\") {\n    TextWrapper.displayName = displayName;\n  }\n\n  return TextWrapper;\n}"]},"metadata":{},"sourceType":"module"}
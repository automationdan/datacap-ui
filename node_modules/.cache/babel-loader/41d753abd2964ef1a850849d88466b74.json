{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"paragraph\", \"lineCount\", \"width\", \"heading\", \"className\"];\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { usePrefix } from '../../internal/usePrefix';\nvar randoms = [0.973051493507435, 0.15334737213558558, 0.5671034553053769];\n\nfunction getRandomInt(min, max, n) {\n  return Math.floor(randoms[n % 3] * (max - min + 1)) + min;\n}\n\nvar SkeletonText = function SkeletonText(_ref) {\n  var _classNames;\n\n  var paragraph = _ref.paragraph,\n      lineCount = _ref.lineCount,\n      width = _ref.width,\n      heading = _ref.heading,\n      className = _ref.className,\n      other = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  var skeletonTextClasses = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--skeleton__text\"), true), _defineProperty(_classNames, \"\".concat(prefix, \"--skeleton__heading\"), heading), _defineProperty(_classNames, className, className), _classNames));\n  var widthNum = parseInt(width, 10);\n  var widthPx = width.includes('px');\n  var widthPercent = width.includes('%');\n\n  if (widthPercent && paragraph) {\n    var lines = [];\n\n    for (var i = 0; i < lineCount; i++) {\n      var randomWidth = getRandomInt(0, 75, i) + 'px';\n      lines.push( /*#__PURE__*/React.createElement(\"p\", _extends({\n        className: skeletonTextClasses,\n        style: {\n          width: \"calc(\".concat(width, \" - \").concat(randomWidth, \")\")\n        },\n        key: i\n      }, other)));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", null, lines);\n  }\n\n  if (widthPx && paragraph) {\n    var _lines = [];\n\n    for (var j = 0; j < lineCount; j++) {\n      var _randomWidth = getRandomInt(widthNum - 75, widthNum, j) + 'px';\n\n      _lines.push( /*#__PURE__*/React.createElement(\"p\", _extends({\n        className: skeletonTextClasses,\n        style: {\n          width: _randomWidth\n        },\n        key: j\n      }, other)));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", null, _lines);\n  }\n\n  return /*#__PURE__*/React.createElement(\"p\", _extends({\n    className: skeletonTextClasses,\n    style: {\n      width: width\n    }\n  }, other));\n};\n\nSkeletonText.propTypes = {\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * generates skeleton text at a larger size\n   */\n  heading: PropTypes.bool,\n\n  /**\n   * the number of lines in a paragraph\n   */\n  lineCount: PropTypes.number,\n\n  /**\n   * will generate multiple lines of text\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * width (in px or %) of single line of text or max-width of paragraph lines\n   */\n  width: PropTypes.string\n};\nSkeletonText.defaultProps = {\n  paragraph: false,\n  width: '100%',\n  heading: false,\n  lineCount: 3\n};\nexport default SkeletonText;","map":{"version":3,"sources":["/Users/danielcrow/Documents/development/cloudfoundry/datacap-ui/node_modules/carbon-components-react/es/components/SkeletonText/SkeletonText.js"],"names":["_extends","_defineProperty","_objectWithoutProperties","_excluded","PropTypes","React","classNames","usePrefix","randoms","getRandomInt","min","max","n","Math","floor","SkeletonText","_ref","_classNames","paragraph","lineCount","width","heading","className","other","prefix","skeletonTextClasses","concat","widthNum","parseInt","widthPx","includes","widthPercent","lines","i","randomWidth","push","createElement","style","key","_lines","j","_randomWidth","propTypes","string","bool","number","defaultProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"paragraph\", \"lineCount\", \"width\", \"heading\", \"className\"];\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { usePrefix } from '../../internal/usePrefix';\nvar randoms = [0.973051493507435, 0.15334737213558558, 0.5671034553053769];\n\nfunction getRandomInt(min, max, n) {\n  return Math.floor(randoms[n % 3] * (max - min + 1)) + min;\n}\n\nvar SkeletonText = function SkeletonText(_ref) {\n  var _classNames;\n\n  var paragraph = _ref.paragraph,\n      lineCount = _ref.lineCount,\n      width = _ref.width,\n      heading = _ref.heading,\n      className = _ref.className,\n      other = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  var skeletonTextClasses = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--skeleton__text\"), true), _defineProperty(_classNames, \"\".concat(prefix, \"--skeleton__heading\"), heading), _defineProperty(_classNames, className, className), _classNames));\n  var widthNum = parseInt(width, 10);\n  var widthPx = width.includes('px');\n  var widthPercent = width.includes('%');\n\n  if (widthPercent && paragraph) {\n    var lines = [];\n\n    for (var i = 0; i < lineCount; i++) {\n      var randomWidth = getRandomInt(0, 75, i) + 'px';\n      lines.push( /*#__PURE__*/React.createElement(\"p\", _extends({\n        className: skeletonTextClasses,\n        style: {\n          width: \"calc(\".concat(width, \" - \").concat(randomWidth, \")\")\n        },\n        key: i\n      }, other)));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", null, lines);\n  }\n\n  if (widthPx && paragraph) {\n    var _lines = [];\n\n    for (var j = 0; j < lineCount; j++) {\n      var _randomWidth = getRandomInt(widthNum - 75, widthNum, j) + 'px';\n\n      _lines.push( /*#__PURE__*/React.createElement(\"p\", _extends({\n        className: skeletonTextClasses,\n        style: {\n          width: _randomWidth\n        },\n        key: j\n      }, other)));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", null, _lines);\n  }\n\n  return /*#__PURE__*/React.createElement(\"p\", _extends({\n    className: skeletonTextClasses,\n    style: {\n      width: width\n    }\n  }, other));\n};\n\nSkeletonText.propTypes = {\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * generates skeleton text at a larger size\n   */\n  heading: PropTypes.bool,\n\n  /**\n   * the number of lines in a paragraph\n   */\n  lineCount: PropTypes.number,\n\n  /**\n   * will generate multiple lines of text\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * width (in px or %) of single line of text or max-width of paragraph lines\n   */\n  width: PropTypes.string\n};\nSkeletonText.defaultProps = {\n  paragraph: false,\n  width: '100%',\n  heading: false,\n  lineCount: 3\n};\nexport default SkeletonText;"]},"metadata":{},"sourceType":"module"}
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { default as Tabs } from './Tabs';
import { default as Tab } from '../../Tab/next/Tab';
import { render, screen } from '@testing-library/react';
import { fireEvent } from '@testing-library/dom';
describe('Tabs', function () {
  it('adds extra classes that are passed via className prop', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var tabs;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, {
              className: "custom-class",
              "data-testid": "tabs-test"
            }, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab"
            }, "content2")));
            tabs = screen.getByTestId('tabs-test');
            _context.next = 4;
            return expect(tabs.classList.contains('custom-class')).toBe(true);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('renders <ul> with tablist role by default', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var tablist;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, {
              className: "custom-class"
            }, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab"
            }, "content2")));
            tablist = screen.getByRole('tablist');
            _context2.next = 4;
            return expect(tablist).toBeTruthy();

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
});
describe('Children tabs', function () {
  it('renders children', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var tabArray;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, {
              className: "custom-class"
            }, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab"
            }, "content2")));
            tabArray = screen.getAllByRole('presentation');
            _context3.next = 4;
            return expect(tabArray.length).toEqual(2);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('first tab is selected by default', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var firstTab;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, {
              className: "custom-class"
            }, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab",
              "data-testid": "first-tab"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab"
            }, "content2")));
            firstTab = screen.getByTestId('first-tab');
            _context4.next = 4;
            return expect(firstTab.classList.contains('bx--tabs__nav-item--selected')).toBe(true);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  it('overrides default selected tab when selected prop is provided', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
    var firstTab, secondTab;
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, {
              className: "custom-class",
              selected: 1
            }, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab",
              "data-testid": "first-tab"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab",
              "data-testid": "second-tab"
            }, "content2")));
            firstTab = screen.getByTestId('first-tab');
            secondTab = screen.getByTestId('second-tab');
            _context5.next = 5;
            return expect(firstTab.classList.contains('bx--tabs__nav-item--selected')).toBe(false);

          case 5:
            _context5.next = 7;
            return expect(secondTab.classList.contains('bx--tabs__nav-item--selected')).toBe(true);

          case 7:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  })));
});
describe('Children tab content', function () {
  it('renders correct number of children content as expected', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
    var contentArray;
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, {
              className: "custom-class"
            }, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab"
            }, "content2")));
            contentArray = screen.getAllByRole('tabpanel', {
              hidden: true
            });
            _context6.next = 4;
            return expect(contentArray.length).toEqual(2);

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  })));
  it('only shows one content tabpanel at a time', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
    var contentArray;
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, {
              className: "custom-class"
            }, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "secondTab"
            }, "content2"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab"
            }, "content3")));
            contentArray = screen.getAllByRole('tabpanel');
            _context7.next = 4;
            return expect(contentArray.length).toEqual(1);

          case 4:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  })));
  it('adds extra classes that are passed via tabContentClassName prop', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
    var content;
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, {
              tabContentClassName: "content-class"
            }, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab"
            }, "content2")));
            content = screen.getByRole('tabpanel');
            _context8.next = 4;
            return expect(content.classList.contains('content-class')).toBe(true);

          case 4:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  })));
  it('renders unselected tab content with hidden attribute', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
    var contentArray;
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, {
              className: "custom-class"
            }, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab"
            }, "content2")));
            contentArray = screen.getAllByRole('tabpanel', {
              hidden: true
            });
            _context9.next = 4;
            return expect(contentArray[1]).toHaveAttribute('hidden');

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  })));
});
describe('Keyboard events', function () {
  it('updates selected tab and content, and loops from first tab to last tab when pressing left arrow key', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
    var tab1, tab2, tabContent, tab1Content;
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab",
              "data-testid": "tab1"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab",
              "data-testid": "tab2"
            }, "content2")));
            tab1 = screen.getByTestId('tab1');
            tab2 = screen.getByTestId('tab2');
            tabContent = screen.getAllByRole('tabpanel');
            tab1Content = tabContent[0];
            fireEvent.keyDown(tab1, {
              key: 'ArrowLeft',
              code: 'ArrowLeft',
              charCode: 37
            });
            _context10.next = 8;
            return expect(tab2.classList.contains('bx--tabs__nav-item--selected')).toBe(true);

          case 8:
            _context10.next = 10;
            return expect(tab1Content).toHaveAttribute('hidden');

          case 10:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  })));
  it('updates selected tab and content when pressing right arrow key', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
    var tab1, tab2, tabContent, tab1Content;
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab",
              "data-testid": "tab1"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab",
              "data-testid": "tab2"
            }, "content2")));
            tab1 = screen.getByTestId('tab1');
            tab2 = screen.getByTestId('tab2');
            tabContent = screen.getAllByRole('tabpanel');
            tab1Content = tabContent[0];
            fireEvent.keyDown(tab1, {
              key: 'ArrowRight',
              code: 'ArrowRight',
              charCode: 39
            });
            _context11.next = 8;
            return expect(tab2.classList.contains('bx--tabs__nav-item--selected')).toBe(true);

          case 8:
            _context11.next = 10;
            return expect(tab1Content).toHaveAttribute('hidden');

          case 10:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  })));
  it('ignores disabled tabs', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
    var tab1, tab3;
    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab",
              "data-testid": "tab1"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab",
              "data-testid": "tab2",
              disabled: true
            }, "content2"), /*#__PURE__*/React.createElement(Tab, {
              label: "thirdTab",
              "data-testid": "tab3"
            }, "content3")));
            tab1 = screen.getByTestId('tab1');
            tab3 = screen.getByTestId('tab3');
            fireEvent.keyDown(tab1, {
              key: 'ArrowRight',
              code: 'ArrowRight',
              charCode: 39
            });
            _context12.next = 6;
            return expect(tab3.classList.contains('bx--tabs__nav-item--selected')).toBe(true);

          case 6:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  })));
});
describe('Click events', function () {
  it('updates selected tab and content on click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
    var tab2, tabContent, tab1Content;
    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab",
              "data-testid": "tab1"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab",
              "data-testid": "tab2"
            }, "content2")));
            tab2 = screen.getByTestId('tab2');
            tabContent = screen.getAllByRole('tabpanel');
            tab1Content = tabContent[0];
            fireEvent.click(tab2);
            _context13.next = 7;
            return expect(tab2.classList.contains('bx--tabs__nav-item--selected')).toBe(true);

          case 7:
            _context13.next = 9;
            return expect(tab1Content).toHaveAttribute('hidden');

          case 9:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  })));
  it('ignores disabled tab on click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
    var tab2, tabContent, tab2Content;
    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            render( /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {
              label: "firstTab",
              "data-testid": "tab1"
            }, "content1"), /*#__PURE__*/React.createElement(Tab, {
              label: "lastTab",
              "data-testid": "tab2",
              disabled: true
            }, "content2")));
            tab2 = screen.getByTestId('tab2');
            tabContent = screen.getAllByRole('tabpanel', {
              hidden: true
            });
            tab2Content = tabContent[1];
            fireEvent.click(tab2);
            _context14.next = 7;
            return expect(tab2.classList.contains('bx--tabs__nav-item--selected')).toBe(false);

          case 7:
            _context14.next = 9;
            return expect(tab2Content).toHaveAttribute('hidden');

          case 9:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  })));
});
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["className", "disabled", "handleTabClick", "handleTabKeyDown", "id", "index", "label", "onClick", "onKeyDown", "renderButton", "renderContent", "selected", "tabIndex"];

/**
 * Copyright IBM Corp. 2016, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';
import { usePrefix } from '../../../internal/usePrefix';
var Tab = /*#__PURE__*/React.forwardRef(function Tab(_ref, ref) {
  var _classNames, _buttonProps;

  var className = _ref.className,
      disabled = _ref.disabled,
      handleTabClick = _ref.handleTabClick,
      handleTabKeyDown = _ref.handleTabKeyDown,
      id = _ref.id,
      index = _ref.index,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? 'provide a label' : _ref$label,
      _ref$onClick = _ref.onClick,
      _onClick = _ref$onClick === void 0 ? function () {} : _ref$onClick,
      _ref$onKeyDown = _ref.onKeyDown,
      _onKeyDown = _ref$onKeyDown === void 0 ? function () {} : _ref$onKeyDown,
      renderButton = _ref.renderButton,
      renderContent = _ref.renderContent,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? false : _ref$selected,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,
      other = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();
  var classes = classNames(className, // TODO: remove scrollable in next major release
  // `${prefix}--tabs__nav-item`,
  "".concat(prefix, "--tabs--scrollable__nav-item"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "--tabs__nav-item--disabled"), disabled), _defineProperty(_classNames, "".concat(prefix, "--tabs__nav-item--selected"), selected), _defineProperty(_classNames, "".concat(prefix, "--tabs--scrollable__nav-item--disabled"), disabled), _defineProperty(_classNames, "".concat(prefix, "--tabs--scrollable__nav-item--selected"), selected), _classNames));
  var buttonProps = (_buttonProps = {}, _defineProperty(_buttonProps, 'aria-selected', selected), _defineProperty(_buttonProps, 'aria-disabled', disabled), _defineProperty(_buttonProps, 'aria-controls', id && "".concat(id, "__panel")), _defineProperty(_buttonProps, "id", id), _defineProperty(_buttonProps, "className", "".concat(prefix, "--tabs--scrollable__nav-link")), _defineProperty(_buttonProps, "tabIndex", !disabled ? tabIndex : -1), _defineProperty(_buttonProps, "ref", ref), _buttonProps);
  return /*#__PURE__*/React.createElement("li", _extends({}, other, {
    className: classes,
    onClick: function onClick(evt) {
      if (disabled) {
        return;
      }

      if (handleTabClick) {
        handleTabClick(index, evt);
      }

      _onClick(evt);
    },
    onKeyDown: function onKeyDown(evt) {
      if (disabled) {
        return;
      }

      if (handleTabKeyDown) {
        handleTabKeyDown(index, evt);
      }

      _onKeyDown(evt);
    },
    role: "presentation"
  }), renderButton ? renderButton(buttonProps) : /*#__PURE__*/React.createElement("button", _extends({
    type: "button",
    role: "tab"
  }, buttonProps), label));
});
Tab.propTypes = {
  /**
   * Specify an optional className to be added to your Tab
   */
  className: PropTypes.string,

  /**
   * Whether your Tab is disabled.
   */
  disabled: PropTypes.bool,

  /**
   * A handler that is invoked when a user clicks on the control.
   * Reserved for usage in Tabs
   */
  handleTabClick: PropTypes.func,

  /**
   * A handler that is invoked on the key down event for the control.
   * Reserved for usage in Tabs
   */
  handleTabKeyDown: PropTypes.func,

  /**
   * The element ID for the top-level element.
   */
  id: PropTypes.string,

  /**
   * The index of your Tab in your Tabs. Reserved for usage in Tabs
   */
  index: PropTypes.number,

  /**
   * Provide the contents of your Tab
   */
  label: PropTypes.node,

  /**
   * Provide a handler that is invoked when a user clicks on the control
   */
  onClick: PropTypes.func,

  /**
   * Provide a handler that is invoked on the key down event for the control
   */
  onKeyDown: PropTypes.func,

  /*
   * An optional parameter to allow overriding the anchor rendering.
   * Useful for using Tab along with react-router or other client
   * side router libraries.
   **/
  renderButton: PropTypes.func,

  /*
   * An optional parameter to allow overriding the content rendering.
   **/
  renderContent: PropTypes.func,

  /**
   * Whether your Tab is selected.
   * Reserved for usage in Tabs
   */
  selected: PropTypes.bool,

  /**
   * Specify the tab index of the `<button>` node
   */
  tabIndex: PropTypes.number
};
export default Tab;
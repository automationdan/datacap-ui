import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

var _ComposedModal$propTy;

var _excluded = ["aria-labelledby", "aria-label", "children", "className", "containerClassName", "danger", "onClose", "onKeyDown", "open", "preventCloseOnClickOutside", "selectorPrimaryFocus", "selectorsFloatingMenus", "size"];
import React, { useRef, useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { ModalHeader } from './ModalHeader';
import { ModalFooter } from '../ComposedModal';
import classNames from 'classnames';
import toggleClass from '../../../tools/toggleClass';
import wrapFocus from '../../../internal/wrapFocus';
import { usePrefix } from '../../../internal/usePrefix';
var ComposedModal = /*#__PURE__*/React.forwardRef(function ComposedModal(_ref, ref) {
  var _classNames, _classNames2;

  var ariaLabelledBy = _ref['aria-labelledby'],
      ariaLabel = _ref['aria-label'],
      children = _ref.children,
      className = _ref.className,
      containerClassName = _ref.containerClassName,
      danger = _ref.danger,
      onClose = _ref.onClose,
      onKeyDown = _ref.onKeyDown,
      open = _ref.open,
      preventCloseOnClickOutside = _ref.preventCloseOnClickOutside,
      selectorPrimaryFocus = _ref.selectorPrimaryFocus,
      selectorsFloatingMenus = _ref.selectorsFloatingMenus,
      size = _ref.size,
      rest = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();

  var _useState = useState(open),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setisOpen = _useState2[1];

  var _useState3 = useState(open),
      _useState4 = _slicedToArray(_useState3, 2),
      prevOpen = _useState4[0],
      setPrevOpen = _useState4[1];

  var innerModal = useRef();
  var button = useRef();
  var startSentinel = useRef();
  var endSentinel = useRef();

  if (open !== prevOpen) {
    setisOpen(open);
    setPrevOpen(open);
  }

  function handleKeyDown(evt) {
    // Esc key
    if (evt.which === 27) {
      closeModal(evt);
    }

    onKeyDown(evt);
  }

  function handleClick(evt) {
    if (!innerModal.current.contains(evt.target) && preventCloseOnClickOutside) {
      return;
    }

    if (innerModal.current && !innerModal.current.contains(evt.target)) {
      closeModal(evt);
    }
  }

  function handleBlur(_ref2) {
    var oldActiveNode = _ref2.target,
        currentActiveNode = _ref2.relatedTarget;

    if (open && currentActiveNode && oldActiveNode) {
      var bodyNode = innerModal.current;
      var startSentinelNode = startSentinel.current;
      var endSentinelNode = endSentinel.current;
      wrapFocus({
        bodyNode: bodyNode,
        startSentinelNode: startSentinelNode,
        endSentinelNode: endSentinelNode,
        currentActiveNode: currentActiveNode,
        oldActiveNode: oldActiveNode,
        selectorsFloatingMenus: selectorsFloatingMenus
      });
    }
  }

  function closeModal(evt) {
    if (!onClose || onClose(evt) !== false) {
      setisOpen(false);
    }
  }

  var modalClass = classNames((_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "--modal"), true), _defineProperty(_classNames, 'is-visible', isOpen), _defineProperty(_classNames, className, className), _defineProperty(_classNames, "".concat(prefix, "--modal--danger"), danger), _classNames));
  var containerClass = classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefix, "--modal-container"), true), _defineProperty(_classNames2, "".concat(prefix, "--modal-container--").concat(size), size), _defineProperty(_classNames2, containerClassName, containerClassName), _classNames2)); // Generate aria-label based on Modal Header label if one is not provided (L253)

  var generatedAriaLabel;
  var childrenWithProps = React.Children.toArray(children).map(function (child) {
    switch (child.type) {
      case /*#__PURE__*/React.createElement(ModalHeader).type:
        generatedAriaLabel = child.props.label;
        return /*#__PURE__*/React.cloneElement(child, {
          closeModal: closeModal
        });

      case /*#__PURE__*/React.createElement(ModalFooter).type:
        return /*#__PURE__*/React.cloneElement(child, {
          closeModal: closeModal,
          inputref: button
        });

      default:
        return child;
    }
  });
  useEffect(function () {
    if (prevOpen !== isOpen) {
      toggleClass(document.body, "".concat(prefix, "--body--with-modal-open"), isOpen);
    }
  });
  useEffect(function () {
    return function () {
      return toggleClass(document.body, "".concat(prefix, "--body--with-modal-open"), false);
    };
  });
  useEffect(function () {
    toggleClass(document.body, "".concat(prefix, "--body--with-modal-open"), open);
  }, [open, prefix]);
  useEffect(function () {
    var focusButton = function focusButton(focusContainerElement) {
      if (focusContainerElement) {
        var primaryFocusElement = focusContainerElement.querySelector(selectorPrimaryFocus);

        if (primaryFocusElement) {
          primaryFocusElement.focus();
          return;
        }

        if (button.current) {
          button.current.focus();
        }
      }
    };

    if (!open) {
      return;
    }

    if (innerModal.current) {
      focusButton(innerModal.current);
    }
  }, [open, selectorPrimaryFocus]);
  return /*#__PURE__*/React.createElement("div", _extends({}, rest, {
    role: "presentation",
    ref: ref,
    onBlur: handleBlur,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    className: modalClass
  }), /*#__PURE__*/React.createElement("span", {
    ref: startSentinel,
    tabIndex: "0",
    role: "link",
    className: "".concat(prefix, "--visually-hidden")
  }, "Focus sentinel"), /*#__PURE__*/React.createElement("div", {
    ref: innerModal,
    className: containerClass,
    role: "dialog",
    "aria-modal": "true",
    "aria-label": ariaLabel ? ariaLabel : generatedAriaLabel,
    "aria-labelledby": ariaLabelledBy
  }, childrenWithProps), /*#__PURE__*/React.createElement("span", {
    ref: endSentinel,
    tabIndex: "0",
    role: "link",
    className: "".concat(prefix, "--visually-hidden")
  }, "Focus sentinel"));
});
ComposedModal.propTypes = (_ComposedModal$propTy = {}, _defineProperty(_ComposedModal$propTy, 'aria-label', PropTypes.string), _defineProperty(_ComposedModal$propTy, 'aria-labelledby', PropTypes.string), _defineProperty(_ComposedModal$propTy, "children", PropTypes.node), _defineProperty(_ComposedModal$propTy, "className", PropTypes.string), _defineProperty(_ComposedModal$propTy, "containerClassName", PropTypes.string), _defineProperty(_ComposedModal$propTy, "danger", PropTypes.bool), _defineProperty(_ComposedModal$propTy, "onClose", PropTypes.func), _defineProperty(_ComposedModal$propTy, "onKeyDown", PropTypes.func), _defineProperty(_ComposedModal$propTy, "open", PropTypes.bool), _defineProperty(_ComposedModal$propTy, "preventCloseOnClickOutside", PropTypes.bool), _defineProperty(_ComposedModal$propTy, "selectorPrimaryFocus", PropTypes.string), _defineProperty(_ComposedModal$propTy, "selectorsFloatingMenus", PropTypes.string), _defineProperty(_ComposedModal$propTy, "size", PropTypes.oneOf(['xs', 'sm', 'md', 'lg'])), _ComposedModal$propTy);
ComposedModal.defaultProps = {
  onKeyDown: function onKeyDown() {},
  selectorPrimaryFocus: '[data-modal-primary-focus]'
};
export default ComposedModal;
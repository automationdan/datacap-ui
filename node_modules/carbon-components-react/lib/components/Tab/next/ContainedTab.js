"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _usePrefix = require("../../../internal/usePrefix");

var _excluded = ["className", "disabled", "handleTabClick", "handleTabKeyDown", "id", "index", "label", "onClick", "onKeyDown", "renderButton", "renderContent", "selected", "tabIndex"];

var ContainedTab = /*#__PURE__*/_react.default.forwardRef(function ContainedTab(_ref, ref) {
  var _classNames, _buttonProps;

  var className = _ref.className,
      disabled = _ref.disabled,
      handleTabClick = _ref.handleTabClick,
      handleTabKeyDown = _ref.handleTabKeyDown,
      id = _ref.id,
      index = _ref.index,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? 'provide a label' : _ref$label,
      _ref$onClick = _ref.onClick,
      _onClick = _ref$onClick === void 0 ? function () {} : _ref$onClick,
      _ref$onKeyDown = _ref.onKeyDown,
      _onKeyDown = _ref$onKeyDown === void 0 ? function () {} : _ref$onKeyDown,
      renderButton = _ref.renderButton,
      renderContent = _ref.renderContent,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? false : _ref$selected,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,
      other = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var prefix = (0, _usePrefix.usePrefix)();
  var classes = (0, _classnames.default)(className, // TODO: remove scrollable in next major release
  // `${prefix}--tabs__nav-item`,
  "".concat(prefix, "--tabs--scrollable__nav-item"), (_classNames = {}, (0, _defineProperty2.default)(_classNames, "".concat(prefix, "--tabs__nav-item--disabled"), disabled), (0, _defineProperty2.default)(_classNames, "".concat(prefix, "--tabs__nav-item--selected"), selected), (0, _defineProperty2.default)(_classNames, "".concat(prefix, "--tabs--scrollable__nav-item--disabled"), disabled), (0, _defineProperty2.default)(_classNames, "".concat(prefix, "--tabs--scrollable__nav-item--selected"), selected), _classNames));
  var buttonProps = (_buttonProps = {}, (0, _defineProperty2.default)(_buttonProps, 'aria-selected', selected), (0, _defineProperty2.default)(_buttonProps, 'aria-disabled', disabled), (0, _defineProperty2.default)(_buttonProps, 'aria-controls', id && "".concat(id, "__panel")), (0, _defineProperty2.default)(_buttonProps, "id", id), (0, _defineProperty2.default)(_buttonProps, "className", "".concat(prefix, "--tabs--scrollable__nav-link")), (0, _defineProperty2.default)(_buttonProps, "tabIndex", !disabled ? tabIndex : -1), (0, _defineProperty2.default)(_buttonProps, "ref", ref), _buttonProps);
  return /*#__PURE__*/_react.default.createElement("li", (0, _extends2.default)({}, other, {
    className: classes,
    onClick: function onClick(evt) {
      if (disabled) {
        return;
      }

      if (handleTabClick) {
        handleTabClick(index, evt);
      }

      _onClick(evt);
    },
    onKeyDown: function onKeyDown(evt) {
      if (disabled) {
        return;
      }

      if (handleTabKeyDown) {
        handleTabKeyDown(index, evt);
      }

      _onKeyDown(evt);
    },
    role: "presentation"
  }), renderButton ? renderButton(buttonProps) : /*#__PURE__*/_react.default.createElement("button", (0, _extends2.default)({
    type: "button",
    role: "tab"
  }, buttonProps), label));
});

ContainedTab.propTypes = {
  /**
   * Specify an optional className to be added to your Tab
   */
  className: _propTypes.default.string,

  /**
   * Whether your Tab is disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * A handler that is invoked when a user clicks on the control.
   * Reserved for usage in Tabs
   */
  handleTabClick: _propTypes.default.func,

  /**
   * A handler that is invoked on the key down event for the control.
   * Reserved for usage in Tabs
   */
  handleTabKeyDown: _propTypes.default.func,

  /**
   * The element ID for the top-level element.
   */
  id: _propTypes.default.string,

  /**
   * The index of your Tab in your Tabs. Reserved for usage in Tabs
   */
  index: _propTypes.default.number,

  /**
   * Provide the contents of your Tab
   */
  label: _propTypes.default.node,

  /**
   * Provide a handler that is invoked when a user clicks on the control
   */
  onClick: _propTypes.default.func,

  /**
   * Provide a handler that is invoked on the key down event for the control
   */
  onKeyDown: _propTypes.default.func,

  /*
   * An optional parameter to allow overriding the anchor rendering.
   * Useful for using Tab along with react-router or other client
   * side router libraries.
   **/
  renderButton: _propTypes.default.func,

  /*
   * An optional parameter to allow overriding the content rendering.
   **/
  renderContent: _propTypes.default.func,

  /**
   * Whether your Tab is selected.
   * Reserved for usage in Tabs
   */
  selected: _propTypes.default.bool,

  /**
   * Specify the tab index of the `<button>` node
   */
  tabIndex: _propTypes.default.number
};
var _default = ContainedTab;
exports.default = _default;